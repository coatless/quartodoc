[
  {
    "objectID": "reference/ui.input_radio_buttons.html",
    "href": "reference/ui.input_radio_buttons.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_radio_buttons(id, label, choices, selected=None, inline=False, width=None)\nCreate a set of radio buttons used to select an item from a list.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nchoices\nshiny.ui._input_check_radio.ChoicesArg\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\nrequired\n\n\nselected\nOptional[str]\nThe values that should be initially selected, if any.\nNone\n\n\ninline\nbool\nIf True, the result is displayed inline\nFalse\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\nReturns\n\n\nrequired\n\n\nA\n\n\nrequired\n\n\n\n\n\n\n.. admonition:: Server value\nA string with the selected value."
  },
  {
    "objectID": "reference/ui.input_radio_buttons.html#see-also",
    "href": "reference/ui.input_radio_buttons.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.update_radio_buttons ~shiny.ui.input_checkbox_group ~shiny.ui.input_checkbox"
  },
  {
    "objectID": "reference/ui.input_radio_buttons.html#examples",
    "href": "reference/ui.input_radio_buttons.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom htmltools import HTML\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(\n        \"rb\",\n        \"Choose one:\",\n        {\n            \"html\": HTML(\"<span style='color:red;'>Red Text</span>\"),\n            \"text\": \"Normal text\",\n        },\n    ),\n    ui.output_ui(\"val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.ui\n    def val():\n        return \"You chose \" + input.rb()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.update_numeric.html",
    "href": "reference/ui.update_numeric.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_numeric(id, label=None, value=None, min=None, max=None, step=None, session=None)\nChange the value of a number input on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nOptional[str]\nAn input label.\nNone\n\n\nvalue\nOptional[float]\nA new value.\nNone\n\n\nmin\nOptional[float]\nThe minimum allowed value.\nNone\n\n\nmax\nOptional[float]\nThe maximum allowed value.\nNone\n\n\nstep\nOptional[float]\nInterval to use when stepping between min and max.\nNone\n\n\nsession\nOptional[Session]\nThe :class:~shiny.Session object passed to the server function of a :func:~shiny.App.\nNone"
  },
  {
    "objectID": "reference/ui.update_numeric.html#note",
    "href": "reference/ui.update_numeric.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_numeric.html#see-also",
    "href": "reference/ui.update_numeric.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_numeric"
  },
  {
    "objectID": "reference/ui.update_numeric.html#examples",
    "href": "reference/ui.update_numeric.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"controller\", \"Controller\", min=0, max=20, value=10),\n    ui.input_numeric(\"inNumber\", \"Input number\", 0),\n    ui.input_numeric(\"inNumber2\", \"Input number 2\", 0),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        x = input.controller()\n        ui.update_numeric(\"inNumber\", value=x)\n        ui.update_numeric(\n            \"inNumber2\",\n            label=\"Number label \" + str(x),\n            value=x,\n            min=x - 10,\n            max=x + 10,\n            step=5,\n        )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.TagList.html",
    "href": "reference/ui.TagList.html",
    "title": "Shiny",
    "section": "",
    "text": "TagList(self, args)\nCreate an HTML tag list (i.e., a fragment of HTML)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*args\nhtmltools._core.TagChild\nThe tag children to add to the list.\n()"
  },
  {
    "objectID": "reference/ui.TagList.html#example",
    "href": "reference/ui.TagList.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\n\n\n\nfrom htmltools import TagList, div TagList(“hello”, div(id=“foo”, class_=“bar”)) hello\n\n\n\n\n\n\n\nMethods\n\n\n\nName\nDescription\n\n\n\n\nappend\nAppend tag children to the end of the list.\n\n\nextend\nExtend the children by appending an iterable of children.\n\n\nget_dependencies\nGet any dependencies needed to render the HTML.\n\n\nget_html_string\nReturn the HTML string for this tag list.\n\n\ninsert\nInsert tag children before a given index.\n\n\nrender\nGet string representation as well as it’s HTML dependencies.\n\n\nsave_html\nSave to a HTML file.\n\n\nshow\nPreview as a complete HTML document.\n\n\ntagify\nConvert any tagifiable children to Tag/TagList objects.\n\n\n\n\n\nappend\nui.TagList.append(self, args)\nAppend tag children to the end of the list.\n\n\nextend\nui.TagList.extend(self, x)\nExtend the children by appending an iterable of children.\n\n\nget_dependencies\nui.TagList.get_dependencies(self, dedup=True)\nGet any dependencies needed to render the HTML.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndedup\nbool\nWhether to deduplicate the dependencies.\nTrue\n\n\n\n\n\n\nget_html_string\nui.TagList.get_html_string(self, indent=0, eol='\\n', _escape_strings=True)\nReturn the HTML string for this tag list.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nindent\nint\nNumber of spaces to indent each line of the HTML.\n0\n\n\neol\nstr\nEnd-of-line character(s).\n'\\n'\n\n\n\n\n\n\ninsert\nui.TagList.insert(self, index, x)\nInsert tag children before a given index.\n\n\nrender\nui.TagList.render(self)\nGet string representation as well as it’s HTML dependencies.\n\n\nsave_html\nui.TagList.save_html(self, file, libdir='lib', include_version=True)\nSave to a HTML file.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile\nstr\nThe file to save to.\nrequired\n\n\nlibdir\nOptional[str]\nThe directory to save the dependencies to.\n'lib'\n\n\ninclude_version\nbool\nWhether to include the version number in the dependency folder name.\nTrue\n\n\n\n\n\nReturns\n\n\n\nType\nDescription\n\n\n\n\nThe path to the generated HTML file.\n\n\n\n\n\n\n\nshow\nui.TagList.show(self, renderer='auto')\nPreview as a complete HTML document.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrenderer\nLiteral[auto, ipython, browser]\nThe renderer to use.\n'auto'\n\n\n\n\n\n\ntagify\nui.TagList.tagify(self)\nConvert any tagifiable children to Tag/TagList objects."
  },
  {
    "objectID": "reference/ui.output_image.html",
    "href": "reference/ui.output_image.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.output_image(id, width='100%', height='400px', inline=False, click=False, dblclick=False, hover=False, brush=False)\nCreate a output container for a static image.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nwidth\nstr\nThe CSS width, e.g. ‘400px’, or ‘100%’.\n'100%'\n\n\nheight\nstr\nThe CSS height, e.g. ‘100%’ or ‘600px’.\n'400px'\n\n\ninline\nbool\nIf True, the result is displayed inline.\nFalse\n\n\nclick\nbool | ClickOpts\nThis can be a boolean or an object created by :func:~shiny.ui.click_opts. The default is False, but if you use True (or equivalently, click_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_click(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position.\nFalse\n\n\ndblclick\nbool | DblClickOpts\nThis is just like the click parameter, but for double-click events.\nFalse\n\n\nhover\nbool | HoverOpts\nSimilar to the click argument, this can be a boolean or an object created by :func:~shiny.ui.hover_opts. The default is False, but if you use True (or equivalently, hover_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_hover(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, use :func:~shiny.ui.hover_opts.\nFalse\n\n\nbrush\nbool | BrushOpts\nSimilar to the click argument, this can be a boolean or an object created by :func:~shiny.ui.brush_opts. The default is False, but if you use True (or equivalently, brush_opts()), the plot will allow the user to “brush” in the plotting area, and will send information about the brushed area to the server, and the value will be accessible via input.plot_brush(). Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, use :func:~shiny.ui.brush_opts. Multiple output_image/output_plot calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.\nFalse\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n~shiny.render.image ~shiny.ui.output_plot"
  },
  {
    "objectID": "reference/ui.output_image.html#examples",
    "href": "reference/ui.output_image.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\nfrom shiny.types import ImgData\n\napp_ui = ui.page_fluid(ui.output_image(\"image\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.image\n    def image():\n        from pathlib import Path\n\n        dir = Path(__file__).resolve().parent\n        img: ImgData = {\"src\": str(dir / \"rstudio-logo.png\"), \"width\": \"150px\"}\n        return img\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.navset_tab_card.html",
    "href": "reference/ui.navset_tab_card.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.navset_tab_card(args, id=None, selected=None, header=None, footer=None)\nRender nav items as a tabset inside a card container.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*args\nshiny.types.NavSetArg\nA collection of nav items (e.g., :func:shiny.ui.nav).\n()\n\n\nid\nOptional[str]\nIf provided, will create an input value that holds the currently selected nav item.\nNone\n\n\nselected\nOptional[str]\nChoose a particular nav item to select by default value (should match it’s value).\nNone\n\n\nheader\nhtmltools.TagChild\nUI to display above the selected content.\nNone\n\n\nfooter\nhtmltools.TagChild\nUI to display below the selected content.\nNone\n\n\n\n\n\n\n~shiny.ui.nav ~shiny.ui.nav_menu ~shiny.ui.nav_control ~shiny.ui.nav_spacer ~shiny.ui.navset_bar ~shiny.ui.navset_tab ~shiny.ui.navset_pill ~shiny.ui.navset_pill_card ~shiny.ui.navset_hidden"
  },
  {
    "objectID": "reference/ui.navset_tab_card.html#example",
    "href": "reference/ui.navset_tab_card.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee nav"
  },
  {
    "objectID": "reference/ui.notification_show.html",
    "href": "reference/ui.notification_show.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.notification_show(ui, action=None, duration=5, close_button=True, id=None, type='default', session=None)\nShow a notification to the user.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nui\nhtmltools.TagChild\nContent of message.\nrequired\n\n\naction\nOptional[TagChild]\nMessage content that represents an action. For example, this could be a link that the user can click on. This is separate from ui so customized layouts can handle the main notification content separately from action content.\nNone\n\n\nduration\nOptional[int | float]\nNumber of seconds to display the message before it disappears. Use None to make the message not automatically disappear.\n5\n\n\nclose_button\nbool\nIf True, display a button which will make the notification disappear when clicked. If False do not display.\nTrue\n\n\nid\nOptional[str]\nAn optional unique identifier for the notification. If supplied, any existing notification with the same id will be replaced with this one (otherwise, a new notification is created).\nNone\n\n\ntype\nLiteral[default, message, warning, error]\nA string which controls the color of the notification. One of “default” (gray), “message” (blue), “warning” (yellow), or “error” (red).\n'default'\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nThe notification’s\n\n\n\n\n\n\n\n~shiny.ui.notification_remove ~shiny.ui.modal"
  },
  {
    "objectID": "reference/ui.notification_show.html#examples",
    "href": "reference/ui.notification_show.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show\"),\n    ui.input_action_button(\"remove\", \"Remove\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.Effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\"Message \" + str(n), duration=None)\n        ids.append(id)\n        n += 1\n\n    @reactive.Effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\n\napp = App(app_ui, server, debug=True)"
  },
  {
    "objectID": "reference/ui.nav_control.html",
    "href": "reference/ui.nav_control.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.nav_control(args)\nPlace a control in the navigation container.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*args\nhtmltools.TagChild\nUI elements to display as the nav item.\n()\n\n\n\n\n\n\n~shiny.ui.nav ~shiny.ui.nav_menu ~shiny.ui.nav_spacer ~shiny.ui.navset_bar ~shiny.ui.navset_tab ~shiny.ui.navset_pill ~shiny.ui.navset_tab_card ~shiny.ui.navset_pill_card ~shiny.ui.navset_hidden Example ——- See nav"
  },
  {
    "objectID": "reference/ui.update_select.html",
    "href": "reference/ui.update_select.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_select(id, label=None, choices=None, selected=None, session=None)\nChange the value of a select input on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nOptional[str]\nAn input label.\nNone\n\n\nchoices\nOptional[SelectChoicesArg]\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\nNone\n\n\nselected\nOptional[str | list[str]]\nThe values that should be initially selected, if any.\nNone\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.update_select.html#note",
    "href": "reference/ui.update_select.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_select.html#see-also",
    "href": "reference/ui.update_select.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_select ~shiny.ui.update_selectize"
  },
  {
    "objectID": "reference/ui.update_select.html#examples",
    "href": "reference/ui.update_select.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.tags.p(\"The checkbox group controls the select input\"),\n    ui.input_checkbox_group(\n        \"inCheckboxGroup\", \"Input checkbox\", [\"Item A\", \"Item B\", \"Item C\"]\n    ),\n    ui.input_select(\"inSelect\", \"Select input\", [\"Item A\", \"Item B\", \"Item C\"]),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        x = input.inCheckboxGroup()\n\n        # Can use [] to remove all choices\n        if x is None:\n            x = []\n        elif isinstance(x, str):\n            x = [x]\n\n        ui.update_select(\n            \"inSelect\",\n            label=\"Select input label \" + str(len(x)),\n            choices=x,\n            selected=x[len(x) - 1] if len(x) > 0 else None,\n        )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.page_fixed.html",
    "href": "reference/ui.page_fixed.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.page_fixed(args, title=None, lang=None, kwargs)\nCreate a fixed page.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\ntyping.Any\nUI elements.\n()\n\n\ntitle\nOptional[str]\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via :func:~shiny.ui.panel_title.\nNone\n\n\nlang\nOptional[str]\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\nNone\n\n\n\nkwargs Attributes on the page level container.\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\npage_fluid page_bootstrap page_navbar"
  },
  {
    "objectID": "reference/ui.page_fixed.html#examples",
    "href": "reference/ui.page_fixed.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import *\n\napp_ui = ui.page_fixed(\n    ui.layout_sidebar(\n        ui.panel_sidebar(ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)),\n        ui.panel_main(ui.output_plot(\"plot\")),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.nav.html",
    "href": "reference/ui.nav.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.nav(title, args, value=None, icon=None)\nCreate a nav item pointing to some internal content.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntitle\nhtmltools.TagChild\nA title to display. Can be a character string or UI elements (i.e., tags).\nrequired\n\n\n*args\nhtmltools.TagChild\nUI elements to display when the item is active.\n()\n\n\nvalue\nOptional[str]\nThe value of the item. This is used to determine whether the item is active (when an id is provided to the nav container), programmatically select the item (e.g., :func:~shiny.ui.update_navs), and/or be provided to the selected argument of the navigation container (e.g., :func:~shiny.ui.navset_tab).\nNone\n\n\nicon\nhtmltools.TagChild\nAn icon to appear inline with the button/link.\nNone\n\n\n\n\n\n\n~shiny.ui.nav_menu ~shiny.ui.nav_control ~shiny.ui.nav_spacer ~shiny.ui.navset_bar ~shiny.ui.navset_tab ~shiny.ui.navset_pill ~shiny.ui.navset_tab_card ~shiny.ui.navset_pill_card ~shiny.ui.navset_hidden"
  },
  {
    "objectID": "reference/ui.nav.html#examples",
    "href": "reference/ui.nav.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom typing import List\n\nfrom shiny import *\nfrom shiny.types import NavSetArg\nfrom shiny.ui import h4\n\n\ndef nav_controls(prefix: str) -> List[NavSetArg]:\n    return [\n        ui.nav(\"a\", prefix + \": tab a content\"),\n        ui.nav(\"b\", prefix + \": tab b content\"),\n        ui.nav_control(\n            ui.a(\n                \"Shiny\",\n                href=\"https://github.com/rstudio/shiny\",\n                target=\"_blank\",\n            )\n        ),\n        ui.nav_spacer(),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav(\"c\", prefix + \": tab c content\"),\n            \"----\",\n            \"Plain text\",\n            \"----\",\n            ui.nav_control(\n                ui.a(\n                    \"RStudio\",\n                    href=\"https://rstudio.com\",\n                    target=\"_blank\",\n                )\n            ),\n            align=\"right\",\n        ),\n    ]\n\n\napp_ui = ui.page_navbar(\n    *nav_controls(\"page_navbar\"),\n    title=\"page_navbar()\",\n    bg=\"#0062cc\",\n    inverse=True,\n    id=\"navbar_id\",\n    footer=ui.div(\n        {\"style\": \"width:80%;margin: 0 auto\"},\n        ui.tags.style(\n            \"\"\"\n            h4 {\n                margin-top: 3em;\n            }\n            \"\"\"\n        ),\n        h4(\"navset_tab()\"),\n        ui.navset_tab(*nav_controls(\"navset_tab()\")),\n        h4(\"navset_pill()\"),\n        ui.navset_pill(*nav_controls(\"navset_pill()\")),\n        h4(\"navset_tab_card()\"),\n        ui.navset_tab_card(*nav_controls(\"navset_tab_card()\")),\n        h4(\"navset_pill_card()\"),\n        ui.navset_pill_card(*nav_controls(\"navset_pill_card()\")),\n        h4(\"navset_pill_list()\"),\n        ui.navset_pill_list(*nav_controls(\"navset_pill_list()\")),\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        print(\"Current navbar page: \", input.navbar_id())\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.page_fluid.html",
    "href": "reference/ui.page_fluid.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.page_fluid(args, title=None, lang=None, kwargs)\nCreate a fluid page.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\ntyping.Any\nUI elements.\n()\n\n\ntitle\nOptional[str]\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via :func:~shiny.ui.panel_title.\nNone\n\n\nlang\nOptional[str]\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\nNone\n\n\nkwargs\nstr\nAttributes on the page level container.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\npage_fixed page_bootstrap page_navbar"
  },
  {
    "objectID": "reference/ui.page_fluid.html#examples",
    "href": "reference/ui.page_fluid.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)),\n        ui.panel_main(ui.output_plot(\"plot\")),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/reactive.poll.html",
    "href": "reference/reactive.poll.html",
    "title": "Shiny",
    "section": "",
    "text": "reactive.poll(poll_func, interval_secs=1, equals=eq, priority=0, session=MISSING)\nCreate a reactive polling object.\nPolling is a technique that approximates “real-time” or streaming updates, using a data source that does not actually have push notifications but does have a quick way to repeatedly check for changes on demand.\nA reactive polling object is constructed using two functions: a polling function, which is a fast-running, inexpensive function that is used to determine whether some data source has changed (such as the timestamp of a file, or a SELECT MAX(updated) FROM table query); and a slower-running reading function that actually loads and returns the data that is desired. The poll() function is intended to be used as a decorator: the poll function is passed as the poll_func arg to @poll(), while the data reading function is the target of the decorator.\nReactive consumers can invoke the resulting polling object to get the current data, and will automatically invalidate when the polling function detects a change. Polling objects also cache the results of the read function; for this reason, apps where all sessions depend on the same data source may want to declare the polling object at the top level of app.py (outside of the server function).\nBoth poll_func and the decorated (data reading) function can read reactive values and ~shiny.reactive.Calc objects. Any invalidations triggered by reactive dependencies will apply to the reactive polling object immediately (not waiting for the interval_secs delay to expire).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npoll_func\nCallable[[], Any] | Callable[[], Awaitable[Any]]\nA function to be called frequently to determine whether a data source has changed. The return value should be something that can be compared inexpensively using ==. Both regular functions and coroutine functions are allowed. Note that the poll_func should NOT return a bool that indicates whether the data source has changed. Rather, each poll_func return value will be checked for equality with its preceding poll_func return value (using == semantics by default), and if it differs, the data source will be considered changed.\nrequired\n\n\ninterval_secs\nfloat\nThe number of seconds to wait after each poll_func invocation before polling again. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.\n1\n\n\nequals\nCallable[[Any, Any], bool]\nThe function that will be used to compare each poll_func return value with its immediate predecessor.\neq\n\n\npriority\nint\nReactive polling is implemented using an ~shiny.reactive.Effect to call poll_func on a timer; use the priority argument to control the order of this Effect’s execution versus other Effects in your app. See ~shiny.reactive.Effect for more details.\n0\n\n\nsession\nMISSING_TYPE | Session | None\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session. If there is no current session (i.e. poll is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.\nMISSING\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA decorator that should be applied to a no-argument function that (expensively)\n\n\n\nreads whatever data is desired. (This function may be a regular function or a\n\n\n\ncoroutine function.) The result of the decorator is a reactive\n\n\n\nthat always returns up-to-date data, and invalidates callers when changes are\n\n\n\ndetected via polling.\n\n\n\n\n\n\n\n~shiny.reactive.file_reader"
  },
  {
    "objectID": "reference/reactive.poll.html#examples",
    "href": "reference/reactive.poll.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport asyncio\nimport random\nimport sqlite3\nfrom datetime import datetime\nfrom typing import Any, Awaitable\n\nimport pandas as pd\n\nfrom shiny import *\n\nSYMBOLS = [\"AAA\", \"BBB\", \"CCC\", \"DDD\", \"EEE\", \"FFF\"]\n\n\ndef timestamp() -> str:\n    return datetime.now().strftime(\"%x %X\")\n\n\ndef rand_price() -> float:\n    return round(random.random() * 250, 2)\n\n\n# === Initialize the database =========================================\n\n\ndef init_db(con: sqlite3.Connection) -> None:\n    cur = con.cursor()\n    try:\n        cur.executescript(\n            \"\"\"\n            CREATE TABLE stock_quotes (timestamp text, symbol text, price real);\n            CREATE INDEX idx_timestamp ON stock_quotes (timestamp);\n            \"\"\"\n        )\n        cur.executemany(\n            \"INSERT INTO stock_quotes (timestamp, symbol, price) VALUES (?, ?, ?)\",\n            [(timestamp(), symbol, rand_price()) for symbol in SYMBOLS],\n        )\n        con.commit()\n    finally:\n        cur.close()\n\n\nconn = sqlite3.connect(\":memory:\")\ninit_db(conn)\n\n\n# === Randomly update the database with an asyncio.task ==============\n\n\ndef update_db(con: sqlite3.Connection) -> None:\n    \"\"\"Update a single stock price entry at random\"\"\"\n\n    cur = con.cursor()\n    try:\n        sym = SYMBOLS[random.randint(0, len(SYMBOLS) - 1)]\n        print(f\"Updating {sym}\")\n        cur.execute(\n            \"UPDATE stock_quotes SET timestamp = ?, price = ? WHERE symbol = ?\",\n            (timestamp(), rand_price(), sym),\n        )\n        con.commit()\n    finally:\n        cur.close()\n\n\nasync def update_db_task(con: sqlite3.Connection) -> Awaitable[None]:\n    \"\"\"Task that alternates between sleeping and updating prices\"\"\"\n    while True:\n        await asyncio.sleep(random.random() * 1.5)\n        update_db(con)\n\n\nasyncio.create_task(update_db_task(conn))\n\n\n# === Create the reactive.poll object ===============================\n\n\ndef tbl_last_modified() -> Any:\n    df = pd.read_sql_query(\"SELECT MAX(timestamp) AS timestamp FROM stock_quotes\", conn)\n    return df[\"timestamp\"].to_list()\n\n\n@reactive.poll(tbl_last_modified, 0.5)\ndef stock_quotes() -> pd.DataFrame:\n    return pd.read_sql_query(\"SELECT timestamp, symbol, price FROM stock_quotes\", conn)\n\n\n# === Define the Shiny UI and server ===============================\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(\n            8,\n            ui.markdown(\n                \"\"\"\n                # `shiny.reactive.poll` demo\n\n                This example app shows how to stream results from a database (in this\n                case, an in-memory sqlite3) with the help of `shiny.reactive.poll`.\n                \"\"\"\n            ),\n            class_=\"mb-3\",\n        ),\n    ),\n    ui.input_selectize(\"symbols\", \"Filter by symbol\", [\"\"] + SYMBOLS, multiple=True),\n    ui.output_ui(\"table\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session) -> None:\n    def filtered_quotes():\n        df = stock_quotes()\n        if input.symbols():\n            df = df[df[\"symbol\"].isin(input.symbols())]\n        return df\n\n    @output\n    @render.ui\n    def table():\n        return ui.HTML(\n            filtered_quotes().to_html(\n                index=False, classes=\"table font-monospace w-auto\"\n            )\n        )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.output_text.html",
    "href": "reference/ui.output_text.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.output_text(id, inline=False, container=None)\nCreate a output container for some text.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\ninline\nbool\nIf True, the result is displayed inline\nFalse\n\n\ncontainer\nOptional[TagFunction]\nA Callable that returns the output container.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element"
  },
  {
    "objectID": "reference/ui.output_text.html#note",
    "href": "reference/ui.output_text.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nText is HTML-escaped prior to rendering."
  },
  {
    "objectID": "reference/ui.output_text.html#see-also",
    "href": "reference/ui.output_text.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.render.text ~shiny.ui.output_text_verbatim"
  },
  {
    "objectID": "reference/ui.output_text.html#examples",
    "href": "reference/ui.output_text.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"txt\", \"Enter the text to display below:\"),\n    ui.row(\n        ui.column(6, ui.output_text(\"text\")),\n        ui.column(6, ui.output_text_verbatim(\"verb\", placeholder=True)),\n    ),\n    ui.row(\n        ui.column(6),\n        ui.column(6, ui.output_text_verbatim(\"verb_no_placeholder\", placeholder=False)),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def text():\n        return input.txt()\n\n    @output\n    @render.text\n    def verb():\n        return input.txt()\n\n    @output\n    @render.text\n    def verb_no_placeholder():\n        return input.txt()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.input_text.html",
    "href": "reference/ui.input_text.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_text(id, label, value='', width=None, placeholder=None, autocomplete='off', spellcheck=None)\nCreate an input control for entry of text values\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nvalue\nstr\nInitial value.\n''\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\nplaceholder\nOptional[str]\nA hint as to what can be entered into the control.\nNone\n\n\nautocomplete\nOptional[str]\nWhether to enable browser autocompletion of the text input (default is None). If None, then it will use the browser’s default behavior. Other possible values include “on”, “off”, “name”, “username”, and “email”. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete for more.\n'off'\n\n\nspellcheck\nOptional[Literal[true, false]]\nWhether to enable browser spell checking of the text input (default is None). If None, then it will use the browser’s default behavior.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n.. admonition:: Server value\nA string containing the current text input. The default value is ``\"\"`` unless\n``value`` is provided."
  },
  {
    "objectID": "reference/ui.input_text.html#see-also",
    "href": "reference/ui.input_text.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_text_area"
  },
  {
    "objectID": "reference/ui.input_text.html#examples",
    "href": "reference/ui.input_text.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"caption\", \"Caption:\", \"Data summary\"),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def value():\n        return input.caption()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.input_checkbox_group.html",
    "href": "reference/ui.input_checkbox_group.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_checkbox_group(id, label, choices, selected=None, inline=False, width=None)\nCreate a group of checkboxes that can be used to toggle multiple choices independently.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nchoices\nshiny.ui._input_check_radio.ChoicesArg\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\nrequired\n\n\nselected\nOptional[str | list[str]]\nThe values that should be initially selected, if any.\nNone\n\n\ninline\nbool\nIf True, the result is displayed inline\nFalse\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\n.. admonition:: Server value\nA tuple of string(s) with the selected value(s) (if any)."
  },
  {
    "objectID": "reference/ui.input_checkbox_group.html#see-also",
    "href": "reference/ui.input_checkbox_group.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.update_checkbox_group ~shiny.ui.input_checkbox ~shiny.ui.input_radio_buttons"
  },
  {
    "objectID": "reference/ui.input_checkbox_group.html#examples",
    "href": "reference/ui.input_checkbox_group.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox_group(\n        \"colors\",\n        \"Choose color(s):\",\n        {\n            \"red\": ui.span(\"Red\", style=\"color: #FF0000;\"),\n            \"green\": ui.span(\"Green\", style=\"color: #00AA00;\"),\n            \"blue\": ui.span(\"Blue\", style=\"color: #0000AA;\"),\n        },\n    ),\n    ui.output_ui(\"val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.ui\n    def val():\n        req(input.colors())\n        return \"You chose \" + \", \".join(input.colors())\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.input_text_area.html",
    "href": "reference/ui.input_text_area.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_text_area(id, label, value='', width=None, height=None, cols=None, rows=None, placeholder=None, resize=None, autocomplete=None, spellcheck=None)\nCreate a textarea input control for entry of unstructured text values.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nvalue\nstr\nInitial value.\n''\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\nheight\nOptional[str]\nThe CSS height, e.g. ‘400px’, or ‘100%’\nNone\n\n\ncols\nOptional[int]\nValue of the visible character columns of the input, e.g. 80. This argument will only take effect if there is not a CSS width rule defined for this element; such a rule could come from the width argument of this function or from a containing page layout such as :func:~shiny.ui.page_fluid.\nNone\n\n\nrows\nOptional[int]\nThe value of the visible character rows of the input, e.g. 6. If the height argument is specified, height will take precedence in the browser’s rendering.\nNone\n\n\nplaceholder\nOptional[str]\nA hint as to what can be entered into the control.\nNone\n\n\nresize\nOptional[Literal[none, both, horizontal, vertical]]\nWhich directions the textarea box can be resized. Can be one of “both”, “none”, “vertical”, and “horizontal”. The default, None, will use the client browser’s default setting for resizing textareas.\nNone\n\n\nautocomplete\nOptional[str]\nWhether to enable browser autocompletion of the text input (default is “off”). If None, then it will use the browser’s default behavior. Other possible values include “on”, “name”, “username”, and “email”. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete for more.\nNone\n\n\nspellcheck\nOptional[Literal[true, false]]\nWhether to enable browser spell checking of the text input (default is None). If None, then it will use the browser’s default behavior.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n.. admonition:: Server value\nA string containing the current text input. The default value is ``\"\"`` unless\n``value`` is provided."
  },
  {
    "objectID": "reference/ui.input_text_area.html#see-also",
    "href": "reference/ui.input_text_area.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_text"
  },
  {
    "objectID": "reference/ui.input_text_area.html#examples",
    "href": "reference/ui.input_text_area.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_text_area(\"caption\", \"Caption:\", \"Data summary\"),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def value():\n        return input.caption()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.input_action_link.html",
    "href": "reference/ui.input_action_link.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_action_link(id, label, icon=None, kwargs)\nCreates a link whose value is initially zero, and increments by one each time it is pressed.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nicon\nhtmltools.TagChild\nAn icon to appear inline with the button/link.\nNone\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to be applied to the link.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n.. admonition:: Server value\nAn integer representing the number of clicks."
  },
  {
    "objectID": "reference/ui.input_action_link.html#see-also",
    "href": "reference/ui.input_action_link.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_action_button ~shiny.event"
  },
  {
    "objectID": "reference/ui.input_action_link.html#examples",
    "href": "reference/ui.input_action_link.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500),\n    ui.input_action_link(\"go\", \"Go!\"),\n    ui.output_plot(\"plot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    # reactive.event() to invalidate the plot when the button is pressed but not when\n    # the slider is changed\n    @reactive.event(input.go, ignore_none=False)\n    def plot():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(input.n())\n        fig, ax = plt.subplots()\n        ax.hist(x, bins=30, density=True)\n        return fig\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/reactive.file_reader.html",
    "href": "reference/reactive.file_reader.html",
    "title": "Shiny",
    "section": "",
    "text": "reactive.file_reader(filepath, interval_secs=1, priority=1, session=MISSING)\nCreate a reactive file reader.\nThis is a decorator, meant to be applied to a no-argument function that reads data from a file on disk. Whenever the file changes (or to be precise, the file size or last modified time changes), past readers of the data are reactively invalidated. This makes it incredibly easy to write apps that automatically update all of their outputs as soon as files on disk change.\nNote that file_reader works only on single files, not directories of files.\nBoth the filepath function and the decorated (file reading) function can read reactive values and ~shiny.reactive.Calc objects. Any invalidations triggered by reactive dependencies will apply to the reactive file reader object immediately (not waiting for the interval_secs delay to expire).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfilepath\nstr | os.PathLike[str] | Callable[[], str] | Callable[[], os.PathLike[str]]\nEither a string indicating the file path to be monitored, or, a no-argument function that returns such a string. The latter is useful if the file to be monitored depends on some user input, the current date/time, etc. The file path provided MUST exist, otherwise Shiny will treat it as an unhandled error and close the session. If a function is used, make sure it is high performance (or is cached, i.e. use a ~shiny.reactive.Calc), as it will be called very frequently.\nrequired\n\n\ninterval_secs\nfloat\nThe number of seconds to wait after each time the file metadata is checked. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.\n1\n\n\nequals\n\nThe function that will be used to compare each poll_func return value with its immediate predecessor.\nrequired\n\n\npriority\nint\nReactive polling is implemented using an ~shiny.reactive.Effect to call poll_func on a timer; use the priority argument to control the order of this Effect’s execution versus other Effects in your app. See ~shiny.reactive.Effect for more details.\n1\n\n\nsession\nMISSING_TYPE | Session | None\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session. If there is no current session (i.e. poll is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.\nMISSING\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA decorator that should be applied to a no-argument function that (expensively)\n\n\n\nreads whatever data is desired. (This function may be a regular function or a\n\n\n\ncoroutine function.) The result of the decorator is a reactive\n\n\n\nthat always returns up-to-date data, and invalidates callers when changes are\n\n\n\ndetected via polling.\n\n\n\n\n\n\n\n~shiny.reactive.poll"
  },
  {
    "objectID": "reference/reactive.file_reader.html#examples",
    "href": "reference/reactive.file_reader.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport pathlib\n\nimport pandas as pd\n\nfrom shiny import *\n\ndir = pathlib.Path(__file__).parent\n\napp_ui = ui.page_fluid(ui.output_table(\"result\"), class_=\"p-3\")\n\n\n@reactive.file_reader(dir / \"mtcars.csv\")\ndef read_file():\n    return pd.read_csv(dir / \"mtcars.csv\")\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.table\n    def result():\n        return read_file()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/reactive.isolate.html",
    "href": "reference/reactive.isolate.html",
    "title": "Shiny",
    "section": "",
    "text": "reactive.isolate()\nCreate a non-reactive scope within a reactive scope.\nOrdinarily, the simple act of reading a reactive value causes a relationship to be established between the caller and the reactive value, where a change to the reactive value will cause the caller to re-execute. (The same applies for the act of getting a reactive expression’s value.) with isolate() lets you read a reactive value or expression without establishing this relationship.\nwith isolate() can also be useful for calling reactive expression at the console, which can be useful for debugging. To do so, wrap the calls to the reactive expression with with isolate().\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA context manager that executes the given expression in a scope where reactive\n\n\n\nvalues can be read, but do not cause the reactive scope of the caller to be\n\n\n\nre-evaluated when they change.\n\n\n\n\n\n\n\n~shiny.event"
  },
  {
    "objectID": "reference/reactive.isolate.html#examples",
    "href": "reference/reactive.isolate.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500),\n    ui.input_action_button(\"go\", \"Go!\", class_=\"btn-success\"),\n    ui.output_plot(\"plot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        # Take a reactive dependency on the action button...\n        input.go()\n\n        # ...but don't take a reactive dependency on the slider\n        with reactive.isolate():\n            np.random.seed(19680801)\n            x = 100 + 15 * np.random.randn(input.n())\n\n        fig, ax = plt.subplots()\n        ax.hist(x, bins=30, density=True)\n        return fig\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.modal_remove.html",
    "href": "reference/ui.modal_remove.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.modal_remove(session=None)\nRemove a modal dialog.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone\n\n\n\n\n\n\n~shiny.ui.modal_show ~shiny.ui.modal"
  },
  {
    "objectID": "reference/ui.modal_remove.html#example",
    "href": "reference/ui.modal_remove.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee ."
  },
  {
    "objectID": "reference/ui.page_navbar.html",
    "href": "reference/ui.page_navbar.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.page_navbar(args, title=None, id=None, selected=None, position='static-top', header=None, footer=None, bg=None, inverse=False, collapsible=True, fluid=True, window_title=MISSING, lang=None)\nCreate a navbar with a navs bar and a title.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nshiny.types.NavSetArg\nUI elements.\n()\n\n\ntitle\nOptional[str | Tag | TagList]\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via :func:~shiny.ui.panel_title.\nNone\n\n\nid\nOptional[str]\nIf provided, will create an input value that holds the currently selected nav item.\nNone\n\n\nselected\nOptional[str]\nChoose a particular nav item to select by default value (should match it’s value).\nNone\n\n\nposition\nLiteral[static-top, fixed-top, fixed-bottom]\nDetermines whether the navbar should be displayed at the top of the page with normal scrolling behavior (“static-top”), pinned at the top (“fixed-top”), or pinned at the bottom (“fixed-bottom”). Note that using “fixed-top” or “fixed-bottom” will cause the navbar to overlay your body content, unless you add padding (e.g., tags.style(\"body {padding-top: 70px;}\")).\n'static-top'\n\n\nheader\nOptional[TagChild]\nUI to display above the selected content.\nNone\n\n\nfooter\nOptional[TagChild]\nUI to display below the selected content.\nNone\n\n\nbg\nOptional[str]\nBackground color of the navbar (a CSS color).\nNone\n\n\ninverse\nbool\nEither True for a light text color or False for a dark text color.\nFalse\n\n\ncollapsible\nbool\nTrue to automatically collapse the navigation elements into a menu when the width of the browser is less than 940 pixels (useful for viewing on smaller touchscreen device)\nTrue\n\n\nfluid\nbool\nTrue to use fluid layout; False to use fixed layout.\nTrue\n\n\nwindow_title\nstr | MISSING_TYPE\nThe browser’s window title (defaults to the host URL of the page). Can also be set as a side effect via :func:~shiny.ui.panel_title.\nMISSING\n\n\nlang\nOptional[str]\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\nnav nav_menu  page_fluid"
  },
  {
    "objectID": "reference/ui.page_navbar.html#example",
    "href": "reference/ui.page_navbar.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee nav."
  },
  {
    "objectID": "reference/App.html",
    "href": "reference/App.html",
    "title": "Shiny",
    "section": "",
    "text": "App(self, ui, server, static_assets=None, debug=False)\nCreate a Shiny app instance.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nui\nTag | TagList | Callable[[Request], Tag | TagList]\nThe UI definition for the app (e.g., a call to :func:~shiny.ui.page_fluid or :func:~shiny.ui.page_fixed, with layouts and controls nested inside). You can also pass a function that takes a :class:~starlette.requests.Request and returns a UI definition, if you need the UI definition to be created dynamically for each pageview.\nrequired\n\n\nserver\nOptional[Callable[[Inputs, Outputs, Session], None]]\nA function which is called once for each session, ensuring that each app is independent.\nrequired\n\n\nstatic_assets\nOptional[str | os.PathLike[str]]\nAn absolute directory containing static files to be served by the app.\nNone\n\n\ndebug\nbool\nWhether to enable debug mode.\nFalse"
  },
  {
    "objectID": "reference/App.html#example",
    "href": "reference/App.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\n.. code-block:: python\nfrom shiny import *\n\napp_ui = ui.page_fluid(\"Hello Shiny!\")\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\napp = App(app_ui, server)\n\nMethods\n\n\n\nName\nDescription\n\n\n\n\ncall_pyodide\nCommunicate with pyodide.\n\n\ninit_starlette_app\n\n\n\nrun\nRun the app.\n\n\nstop\nStop the app (i.e., close all sessions).\n\n\n\n\n\ncall_pyodide\nApp.call_pyodide(self, scope, receive, send)\nCommunicate with pyodide."
  },
  {
    "objectID": "reference/App.html#warning",
    "href": "reference/App.html#warning",
    "title": "Shiny",
    "section": "Warning",
    "text": "Warning\nThis method is not intended for public usage. It’s exported for use by shinylive.\n\ninit_starlette_app\nApp.init_starlette_app(self)\n\n\nrun\nApp.run(self, kwargs)\nRun the app.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nkwargs\nobject\nKeyword arguments passed to :func:~shiny.run_app.\n{}\n\n\n\n\n\n\nstop\nApp.stop(self)\nStop the app (i.e., close all sessions)."
  },
  {
    "objectID": "reference/App.html#see-also",
    "href": "reference/App.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.Session.close"
  },
  {
    "objectID": "reference/ui.markdown.html",
    "href": "reference/ui.markdown.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.markdown(text, render_func=None, kwargs)\nConvert a string of markdown to :func:ui.HTML.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntext\nstr\nA string of text containing markdown.\nrequired\n\n\nrender_func\nOptional[Callable[[str], str]]\nA function (with at least 1 argument) which accepts a string of markdown and returns a string of HTML. By default, a customized instance of the :class:MarkdownIt class (which supports Github-flavored markdown) from the markdown-it package is used.\nNone\n\n\n**kwargs\nobject\nAdditional keyword arguments passed to the render_func.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nAn"
  },
  {
    "objectID": "reference/ui.markdown.html#note",
    "href": "reference/ui.markdown.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nUse :func:ui.include_markdown instead if you want to include local images (or other files) in the markdown."
  },
  {
    "objectID": "reference/ui.markdown.html#see-also",
    "href": "reference/ui.markdown.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n:func:ui.include_markdown"
  },
  {
    "objectID": "reference/ui.markdown.html#examples",
    "href": "reference/ui.markdown.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\nui_app = ui.page_fluid(\n    ui.markdown(\n        \"\"\"\n        # Hello World\n\n        This is **markdown** and here is some `code`:\n\n        ```python\n        print('Hello world!')\n        ```\n        \"\"\"\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(ui_app, server)"
  },
  {
    "objectID": "reference/ui.update_text.html",
    "href": "reference/ui.update_text.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_text(id, label=None, value=None, placeholder=None, session=None)\nChange the value of a text input on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nOptional[str]\nAn input label.\nNone\n\n\nvalue\nOptional[str]\nA new value.\nNone\n\n\nplaceholder\nOptional[str]\nA hint as to what can be entered into the control.\nNone\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.update_text.html#note",
    "href": "reference/ui.update_text.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_text.html#see-also",
    "href": "reference/ui.update_text.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_text"
  },
  {
    "objectID": "reference/ui.update_text.html#examples",
    "href": "reference/ui.update_text.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"controller\", \"Controller\", min=0, max=20, value=10),\n    ui.input_text(\"inText\", \"Input text\"),\n    ui.input_text(\"inText2\", \"Input text 2\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        x = str(input.controller())\n        # This will change the value of input$inText, based on x\n        ui.update_text(\"inText\", value=\"New text \" + x)\n        # Can also set the label, this time for input$inText2\n        ui.update_text(\"inText2\", label=\"New label \" + x, value=\"New text\" + x)\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/session.session_context.html",
    "href": "reference/session.session_context.html",
    "title": "Shiny",
    "section": "",
    "text": "session.session_context(session)\nContext manager for current session.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nrequired"
  },
  {
    "objectID": "reference/module.server.html",
    "href": "reference/module.server.html",
    "title": "Shiny",
    "section": "",
    "text": "module.server(fn)"
  },
  {
    "objectID": "reference/ui.update_date.html",
    "href": "reference/ui.update_date.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_date(id, label=None, value=None, min=None, max=None, session=None)\nChange the value of a date input on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nOptional[str]\nAn input label.\nNone\n\n\nvalue\nOptional[date | str]\nThe starting date. Either a date() object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client’s time zone.\nNone\n\n\nmin\nOptional[date | str]\nThe minimum allowed value.\nNone\n\n\nmax\nOptional[date | str]\nThe maximum allowed value.\nNone\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.update_date.html#note",
    "href": "reference/ui.update_date.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_date.html#see-also",
    "href": "reference/ui.update_date.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_date"
  },
  {
    "objectID": "reference/ui.update_date.html#examples",
    "href": "reference/ui.update_date.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom datetime import date, timedelta\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Day of month\", min=1, max=30, value=10),\n    ui.input_date(\"inDate\", \"Input date\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        d = date(2013, 4, input.n())\n        ui.update_date(\n            \"inDate\",\n            label=\"Date label \" + str(input.n()),\n            value=d,\n            min=d - timedelta(days=3),\n            max=d + timedelta(days=3),\n        )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.modal.html",
    "href": "reference/ui.modal.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.modal(args, title=None, footer=MISSING, size='m', easy_close=False, fade=True, kwargs)\nCreates the UI for a modal dialog, using Bootstrap’s modal class. Modals are typically used for showing important messages, or for presenting UI that requires input from the user, such as a user name and/or password input.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nTagChild | TagAttrs\nUI elements for the body of the modal.\n()\n\n\ntitle\nOptional[str]\nAn optional title for the modal dialog.\nNone\n\n\nfooter\nTagChild | MISSING_TYPE\nUI for footer. Use None for no footer.\nMISSING\n\n\nsize\nLiteral[m, s, l, xl]\nOne of “s” for small, “m” (the default) for medium, or “l” for large.\n'm'\n\n\neasy_close\nbool\nIf True, the modal dialog can be dismissed by clicking outside the dialog box, or be pressing the Escape key. If False (the default), the modal dialog can’t be dismissed in those ways; instead it must be dismissed by clicking on a modal_button(), or from a call to modal_remove() on the server.\nFalse\n\n\nfade\nbool\nIf False, the modal dialog will have no fade-in animation (it will simply appear rather than fade in to view).\nTrue\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to be applied to the modal’s body tag.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n~shiny.ui.modal_show ~shiny.ui.modal_remove ~shiny.ui.modal_button"
  },
  {
    "objectID": "reference/ui.modal.html#examples",
    "href": "reference/ui.modal.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            title=\"Somewhat important message\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.insert_ui.html",
    "href": "reference/ui.insert_ui.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.insert_ui(ui, selector, where='beforeEnd', multiple=False, immediate=False, session=None)\nInsert UI objects\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nui\nhtmltools.TagChild\nThe UI object you want to insert. This can be anything that you usually put inside your apps’s ui function. If you’re inserting multiple elements in one call, make sure to wrap them in either a :func:~shiny.ui.TagList or a :func:~shiny.ui.tags.div (the latter option has the advantage that you can give it an id to make it easier to reference or remove it later on). If you want to insert raw html, use :func:~shiny.ui.HTML.\nrequired\n\n\nselector\nstr\nA string that is accepted by jQuery’s selector (i.e. the string s to be placed in a $(s) jQuery call) which determines the element(s) relative to which you want to insert your UI object.\nrequired\n\n\nwhere\nLiteral[beforeBegin, afterBegin, beforeEnd, afterEnd]\nWhere your UI object should go relative to the selector: - beforeBegin: Before the selector element itself - afterBegin: Just inside the selector element, before its first child - beforeEnd: Just inside the selector element, after its last child (default) - afterEnd: After the selector element itself Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML.\n'beforeEnd'\n\n\nmultiple\nbool\nIn case your selector matches more than one element, multiple determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).\nFalse\n\n\nimmediate\nbool\nWhether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).\nFalse\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.insert_ui.html#note",
    "href": "reference/ui.insert_ui.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nThis function allows you to dynamically add arbitrary UI into your app, whenever you want, as many times as you want. Unlike :func:~shiny.render.ui, the UI generated with insert_ui is persistent: once it’s created, it stays there until removed by :func:remove_ui. Each new call to insert_ui creates more UI objects, in addition to the ones already there (all independent from one another). To update a part of the UI (ex: an input object), you must use the appropriate render function or a customized reactive function."
  },
  {
    "objectID": "reference/ui.insert_ui.html#see-also",
    "href": "reference/ui.insert_ui.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.remove_ui ~shiny.render.ui"
  },
  {
    "objectID": "reference/ui.insert_ui.html#examples",
    "href": "reference/ui.insert_ui.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"add\", \"Add UI\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    @reactive.event(input.add)\n    def _():\n        ui.insert_ui(\n            ui.input_text(\"txt\" + str(input.add()), \"Enter some text\"),\n            selector=\"#add\",\n            where=\"afterEnd\",\n        )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.panel_conditional.html",
    "href": "reference/ui.panel_conditional.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.panel_conditional(condition, args, kwargs)\nCreate a conditional panel\nShow UI elements only if a JavaScript condition is true.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncondition\nstr\nA JavaScript expression that will be evaluated repeatedly to determine whether the panel should be displayed.\nrequired\n\n\nargs\nTagChild | TagAttrs\nUI elements to include inside the panel.\n()\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to place on the panel tag.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element."
  },
  {
    "objectID": "reference/ui.panel_conditional.html#note",
    "href": "reference/ui.panel_conditional.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nIn the JS expression, you can refer to input and output JavaScript objects that contain the current values of input and output. For example, if you have an input with an id of foo, then you can use input.foo to read its value. (Be sure not to modify the input/output objects, as this may cause unpredictable behavior.)\nYou are not recommended to use special JavaScript characters such as a period . in the input id’s, but if you do use them anyway, for example, id = \"foo.bar\", you will have to use input[\"foo.bar\"] instead of input.foo.bar to read the input value.\nTip\n\n\n\n\n\n\nA more powerful (but slower) way to conditionally show UI content is to use :func:~shiny.render.ui.\n\n\n\n\n~shiny.render.ui ~shiny.ui.output_ui\n\n\nExamples\n\n\n\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"show\", \"Show radio buttons\", False),\n    ui.panel_conditional(\n        \"input.show\", ui.input_radio_buttons(\"radio\", \"Choose \", [\"slider\", \"select\"])\n    ),\n    ui.panel_conditional(\n        \"input.show && input.radio === 'slider'\",\n        ui.input_slider(\"slider\", None, min=0, max=100, value=50),\n    ),\n    ui.panel_conditional(\n        \"input.show && input.radio === 'select'\",\n        ui.input_select(\"slider\", None, [\"A\", \"B\", \"C\"]),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/types.SafeException.html",
    "href": "reference/types.SafeException.html",
    "title": "Shiny",
    "section": "",
    "text": "types.SafeException()\nThrow a safe exception.\nWhen shiny.App.SANITIZE_ERRORS is True (which is the case in some production environments like RStudio Connect), exceptions are sanitized to prevent leaking of sensitive information. This class provides a way to generate an error that is OK to be displayed to the user."
  },
  {
    "objectID": "reference/types.SafeException.html#examples",
    "href": "reference/types.SafeException.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\nfrom shiny.types import SafeException\n\napp_ui = ui.page_fluid(ui.output_ui(\"safe\"), ui.output_ui(\"unsafe\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.ui\n    def safe():\n        raise SafeException(\"This is a safe exception\")\n\n    @output\n    @render.ui\n    def unsafe():\n        raise Exception(\"This is an unsafe exception\")\n\n\napp = App(app_ui, server)\napp.sanitize_errors = True"
  },
  {
    "objectID": "reference/ui.input_date_range.html",
    "href": "reference/ui.input_date_range.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_date_range(id, label, start=None, end=None, min=None, max=None, format='yyyy-mm-dd', startview='month', weekstart=0, language='en', separator=' to ', width=None, autoclose=True)\nCreates a pair of text inputs which, when clicked on, bring up calendars that the user can click on to select dates.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nstart\nOptional[date | str]\nThe initial start date. Either a :func:~datetime.date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client’s time zone.\nNone\n\n\nend\nOptional[date | str]\nThe initial end date. Either a :func:~datetime.date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client’s time zone.\nNone\n\n\nmin\nOptional[date | str]\nThe minimum allowed date. Either a :func:~datetime.date object, or a string in yyyy-mm-dd format.\nNone\n\n\nmax\nOptional[date | str]\nThe maximum allowed date. Either a :func:~datetime.date object, or a string in yyyy-mm-dd format.\nNone\n\n\nformat\nstr\nThe format of the date to display in the browser.\n'yyyy-mm-dd'\n\n\nstartview\nstr\nThe date range shown when the input object is first clicked. Can be “month” (the default), “year”, or “decade”.\n'month'\n\n\nweekstart\nint\nWhich day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).\n0\n\n\nlanguage\nstr\nThe language used for month and day names. Default is “en”. Other valid values include “ar”, “az”, “bg”, “bs”, “ca”, “cs”, “cy”, “da”, “de”, “el”, “en-AU”, “en-GB”, “eo”, “es”, “et”, “eu”, “fa”, “fi”, “fo”, “fr-CH”, “fr”, “gl”, “he”, “hr”, “hu”, “hy”, “id”, “is”, “it-CH”, “it”, “ja”, “ka”, “kh”, “kk”, “ko”, “kr”, “lt”, “lv”, “me”, “mk”, “mn”, “ms”, “nb”, “nl-BE”, “nl”, “no”, “pl”, “pt-BR”, “pt”, “ro”, “rs-latin”, “rs”, “ru”, “sk”, “sl”, “sq”, “sr-latin”, “sr”, “sv”, “sw”, “th”, “tr”, “uk”, “vi”, “zh-CN”, and “zh-TW”.\n'en'\n\n\nseparator\nstr\nString to display between the start and end input boxes.\n' to '\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\nautoclose\nbool\nWhether or not to close the datepicker immediately when a date is selected.\nTrue\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element."
  },
  {
    "objectID": "reference/ui.input_date_range.html#note",
    "href": "reference/ui.input_date_range.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nThe date format string specifies how the date will be displayed in the browser. It allows the following values:\n\nyy: Year without century (12)\nyyyy: Year with century (2012)\nmm: Month number, with leading zero (01-12)\nm: Month number, without leading zero (1-12)\nM: Abbreviated month name\nMM: Full month name\ndd: Day of month with leading zero\nd: Day of month without leading zero\nD: Abbreviated weekday name\nDD: Full weekday name"
  },
  {
    "objectID": "reference/ui.input_date_range.html#notes",
    "href": "reference/ui.input_date_range.html#notes",
    "title": "Shiny",
    "section": "Notes",
    "text": "Notes\n.. admonition:: Server value\nA tuple of :func:`~datetime.date` objects."
  },
  {
    "objectID": "reference/ui.input_date_range.html#see-also",
    "href": "reference/ui.input_date_range.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.update_date_range ~shiny.ui.input_date"
  },
  {
    "objectID": "reference/ui.input_date_range.html#examples",
    "href": "reference/ui.input_date_range.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom datetime import date\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_date_range(\n        \"daterange1\", \"Date range:\", start=\"2001-01-01\", end=\"2010-12-31\"\n    ),\n    # Default start and end is the current date in the client's time zone\n    ui.input_date_range(\"daterange2\", \"Date range:\"),\n    # start and end are always specified in yyyy-mm-dd, even if the display\n    # format is different\n    ui.input_date_range(\n        \"daterange3\",\n        \"Date range:\",\n        start=\"2001-01-01\",\n        end=\"2010-12-31\",\n        min=\"2001-01-01\",\n        max=\"2012-12-21\",\n        format=\"mm/dd/yy\",\n        separator=\" - \",\n    ),\n    # Pass in Date objects\n    ui.input_date_range(\n        \"daterange4\", \"Date range:\", start=date(2001, 1, 1), end=date(2010, 12, 31)\n    ),\n    # Use different language and different first day of week\n    ui.input_date_range(\"daterange5\", \"Date range:\", language=\"de\", weekstart=1),\n    # Start with decade view instead of default month view\n    ui.input_date_range(\"daterange6\", \"Date range:\", startview=\"decade\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.input_checkbox.html",
    "href": "reference/ui.input_checkbox.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_checkbox(id, label, value=False, width=None)\nCreate a checkbox that can be used to specify logical values.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nvalue\nbool\nInitial value.\nFalse\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\n.. admonition:: Server value\n``True`` if checked, ``False`` otherwise."
  },
  {
    "objectID": "reference/ui.input_checkbox.html#see-also",
    "href": "reference/ui.input_checkbox.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_switch ~shiny.ui.update_checkbox ~shiny.ui.input_checkbox_group ~shiny.ui.input_radio_buttons"
  },
  {
    "objectID": "reference/ui.input_checkbox.html#examples",
    "href": "reference/ui.input_checkbox.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"somevalue\", \"Some value\", False),\n    ui.output_ui(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.ui\n    def value():\n        return input.somevalue()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/types.SilentCancelOutputException.html",
    "href": "reference/types.SilentCancelOutputException.html",
    "title": "Shiny",
    "section": "",
    "text": "types.SilentCancelOutputException()\nThrow a silent exception and don’t clear output\nSimilar to :class:~SilentException, but if thrown in an output context, existing output isn’t cleared."
  },
  {
    "objectID": "reference/types.SilentCancelOutputException.html#see-also",
    "href": "reference/types.SilentCancelOutputException.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~SilentException"
  },
  {
    "objectID": "reference/types.SilentCancelOutputException.html#examples",
    "href": "reference/types.SilentCancelOutputException.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\nfrom shiny.types import SilentCancelOutputException\n\napp_ui = ui.page_fluid(\n    ui.input_text(\n        \"txt\",\n        \"Delete the input text completely: it won't get removed below the input\",\n        \"Some text\",\n        width=\"400px\",\n    ),\n    ui.output_ui(\"txt_out\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.ui\n    def txt_out():\n        if not input.txt():\n            raise SilentCancelOutputException()\n        return \"Your input: \" + input.txt()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.layout_sidebar.html",
    "href": "reference/ui.layout_sidebar.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.layout_sidebar(sidebar, main, position='left')\nLayout a sidebar and main area\nCreate a layout with a sidebar (:func:~shiny.ui.panel_sidebar) and main area (:func:~shiny.ui.panel_main). The sidebar is displayed with a distinct background color and typically contains input controls. By default, the main area occupies 2/3 of the horizontal width and typically contains outputs.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsidebar\nhtmltools.TagChild\nA UI element to place in the sidebar (typically a :func:~shiny.ui.panel_sidebar)\nrequired\n\n\nmain\nhtmltools.TagChild\nA UI element to place in the main area (typically a :func:~shiny.ui.panel_main)\nrequired\n\n\nposition\nLiteral[left, right]\nThe position of the sidebar (left or right)\n'left'\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\npanel_sidebar panel_main"
  },
  {
    "objectID": "reference/ui.layout_sidebar.html#examples",
    "href": "reference/ui.layout_sidebar.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)),\n        ui.panel_main(ui.output_plot(\"plot\")),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.update_selectize.html",
    "href": "reference/ui.update_selectize.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_selectize(id, label=None, choices=None, selected=None, server=False, session=None)\nChange the value of a selectize.js powered input on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nOptional[str]\nAn input label.\nNone\n\n\nchoices\nOptional[SelectChoicesArg]\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\nNone\n\n\nselected\nOptional[str | list[str]]\nThe values that should be initially selected, if any.\nNone\n\n\nserver\nbool\nWhether to store choices on the server side, and load the select options dynamically on searching, instead of writing all choices into the page at once (i.e., only use the client-side version of selectize.js)\nFalse\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.update_selectize.html#note",
    "href": "reference/ui.update_selectize.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_selectize.html#see-also",
    "href": "reference/ui.update_selectize.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_selectize"
  },
  {
    "objectID": "reference/ui.update_selectize.html#examples",
    "href": "reference/ui.update_selectize.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(\"x\", \"Server side selectize\", choices=[], multiple=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        ui.update_selectize(\n            \"x\",\n            choices=[f\"Foo {i}\" for i in range(10000)],\n            selected=[\"Foo 0\", \"Foo 1\"],\n            server=True,\n        )\n\n\napp = App(app_ui, server, debug=True)"
  },
  {
    "objectID": "reference/ui.download_button.html",
    "href": "reference/ui.download_button.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.download_button(id, label, icon=None, width=None, kwargs)\nCreate a download button\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn id for the download.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nicon\nhtmltools.TagChild\nAn icon to display on the button.\nNone\n\n\nwidth\nOptional[str]\nThe width of the button.\nNone\n\n\nkwargs\nhtmltools.TagAttrValue\nAdditional attributes for the button.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n~shiny.Session.download ~shiny.ui.download_link"
  },
  {
    "objectID": "reference/ui.download_button.html#examples",
    "href": "reference/ui.download_button.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport asyncio\nfrom datetime import date\n\nimport numpy as np\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.download_button(\"downloadData\", \"Download\"),\n)\n\n\n# For more examples of different types of download handlers, see:\n# https://github.com/rstudio/py-shiny/blob/68ffc27/examples/download/app.py#L90\ndef server(input: Inputs, output: Outputs, session: Session):\n    @session.download(\n        filename=lambda: f\"新型-{date.today().isoformat()}-{np.random.randint(100,999)}.csv\"\n    )\n    async def downloadData():\n        await asyncio.sleep(0.25)\n        yield \"one,two,three\\n\"\n        yield \"新,1,2\\n\"\n        yield \"型,4,5\\n\"\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.panel_sidebar.html",
    "href": "reference/ui.panel_sidebar.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.panel_sidebar(args, width=4, kwargs)\nCreate a sidebar panel\nSee :func:~shiny.ui.layout_sidebar for more information and an example.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nTagChild | TagAttrs\nUI elements to include inside the sidebar.\n()\n\n\nwidth\nint\nThe width of the sidebar (an integer between 1 and 12)\n4\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to place on the sidebar tag.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\npanel_sidebar panel_main"
  },
  {
    "objectID": "reference/reactive.Calc.html",
    "href": "reference/reactive.Calc.html",
    "title": "Shiny",
    "section": "",
    "text": "reactive.Calc(fn=None, session=MISSING)\nMark a function as a reactive calculation.\nA reactive calculation is a function whose return value depends solely on other reactive value(s) (i.e., :class:~shiny.Inputs, :class:~shiny.reactive.Value, and other reactive calculations). Whenever a reactive value changes, any reactive calculations that depend on it are “invalidated” and automatically re-execute when necessary. If a reactive calculation is marked as invalidated, any other reactive calculations that recently called it are also marked as invalidated. In this way, invalidations ripple through reactive calculations that depend on each other.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsession\nMISSING_TYPE | Session | None\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nMISSING\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA decorator that marks a function as a reactive calculation.\n\n\n\n\nTip\n\n\n\n\n\n\nReactive calculations should not produce any side effects; to reactively produce side effects, use :func:~shiny.reactive.Effect instead.\n\n\n\n\n~shiny.Inputs ~shiny.reactive.Value ~shiny.reactive.Effect ~shiny.reactive.invalidate_later ~shiny.event\n\n\nExamples\n\n\n\n#| standalone: true\n\nimport random\nimport time\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"first\", \"Invalidate first (slow) computation\"),\n    ui.input_action_button(\"second\", \"Invalidate second (fast) computation\"),\n    ui.br(),\n    ui.output_ui(\"result\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Calc\n    def first():\n        input.first()\n        p = ui.Progress()\n        for i in range(30):\n            p.set(i / 30, message=\"Computing, please wait...\")\n            time.sleep(0.1)\n        p.close()\n        return random.randint(1, 1000)\n\n    @reactive.Calc\n    def second():\n        input.second()\n        return random.randint(1, 1000)\n\n    @output\n    @render.ui\n    def result():\n        return first() + second()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.column.html",
    "href": "reference/ui.column.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.column(width, args, offset=0, kwargs)\nResponsive row-column based layout\nSee :func:~shiny.ui.row for more information.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nwidth\nint\nThe width of the column (an integer between 1 and 12).\nrequired\n\n\nargs\nTagChild | TagAttrs\nUI elements to place within the column.\n()\n\n\noffset\nint\nThe number of columns to offset this column from the end of the previous column.\n0\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to place on the column tag.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\nrow"
  },
  {
    "objectID": "reference/ui.panel_title.html",
    "href": "reference/ui.panel_title.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.panel_title(title, window_title=MISSING)\nCreate title(s) for the application.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntitle\nstr | Tag | TagList\nA title to display in the app’s UI.\nrequired\n\n\nwindow_title\nstr | MISSING_TYPE\nA title to display on the browser tab.\nMISSING\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element."
  },
  {
    "objectID": "reference/ui.panel_title.html#note",
    "href": "reference/ui.panel_title.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nThis result of this function causes a side effect of adding a title tag to the head of the document (this is necessary for the browser to display the title in the browser window). You can also specify a page title explicitly using the title parameter of the top-level page function (e.g., :func:~shiny.ui.page_fluid)."
  },
  {
    "objectID": "reference/ui.panel_title.html#examples",
    "href": "reference/ui.panel_title.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(ui.panel_title(\"Page title\", \"Window title\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/render.plot.html",
    "href": "reference/render.plot.html",
    "title": "Shiny",
    "section": "",
    "text": "render.plot(fn=None, alt=None, kwargs)\nReactively render a plot object as an HTML image.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalt\nOptional[str]\nAlternative text for the image if it cannot be displayed or viewed (i.e., the user uses a screen reader).\nNone\n\n\n**kwargs\ntyping.Any\nAdditional keyword arguments passed to the relevant method for saving the image (e.g., for matplotlib, arguments to savefig(); for PIL and plotnine, arguments to save()).\n{}\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA decorator for a function that returns any of the following\n1. A :class:matplotlib.figure.Figure instance.\n\n\n\n\nAn :class:matplotlib.artist.Artist instance.\nA list/tuple of Figure/Artist instances.\nAn object with a ‘figure’ attribute pointing to a :class:matplotlib.figure.Figure instance.\nA :class:PIL.Image.Image instance. |\n\nIt’s also possible to use the matplotlib.pyplot interface; in that case, your function should just call pyplot functions and not return anything. (Note that if the decorated function is async, then it’s not safe to use pyplot. Shiny will detect this case and throw an error asking you to use matplotlib’s object-oriented interface instead.)"
  },
  {
    "objectID": "reference/render.plot.html#tip",
    "href": "reference/render.plot.html#tip",
    "title": "Shiny",
    "section": "Tip",
    "text": "Tip\nThis decorator should be applied before the @output decorator. Also, the name of the decorated function (or @output(id=...)) should match the id of a :func:~shiny.ui.output_plot container (see :func:~shiny.ui.output_plot for example usage)."
  },
  {
    "objectID": "reference/render.plot.html#see-also",
    "href": "reference/render.plot.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.output_plot ~shiny.render.image"
  },
  {
    "objectID": "reference/ui.output_table.html",
    "href": "reference/ui.output_table.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.output_table(id, kwargs)\nCreate a output container for a table.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\n**kwargs\nhtmltools.TagAttrValue\nAdditional attributes to add to the container.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nSee Also\n\n\n\n——-\n\n\n\nhtmltools.Tag"
  },
  {
    "objectID": "reference/ui.output_table.html#examples",
    "href": "reference/ui.output_table.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport pathlib\n\nimport pandas as pd\n\nfrom shiny import *\n\ndir = pathlib.Path(__file__).parent\nmtcars = pd.read_csv(dir / \"mtcars.csv\")\n\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"highlight\", \"Highlight min/max values\"),\n    ui.output_table(\"result\"),\n    # Legend\n    ui.panel_conditional(\n        \"input.highlight\",\n        ui.panel_absolute(\n            \"Yellow is maximum, grey is minimum\",\n            bottom=\"6px\",\n            right=\"6px\",\n            class_=\"p-1 bg-light border\",\n        ),\n    ),\n    class_=\"p-3\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.table\n    def result():\n        if not input.highlight():\n            # If we're not highlighting values, we can simply\n            # return the pandas data frame as-is; @render.table\n            # will call .to_html() on it.\n            return mtcars\n        else:\n            # We need to use the pandas Styler API. The default\n            # formatting options for Styler are not the same as\n            # DataFrame.to_html(), so we set a few options to\n            # make them match.\n            return (\n                mtcars.style.set_table_attributes(\n                    'class=\"dataframe shiny-table table w-auto\"'\n                )\n                .hide(axis=\"index\")\n                .format(\n                    {\n                        \"mpg\": \"{0:0.1f}\",\n                        \"disp\": \"{0:0.1f}\",\n                        \"drat\": \"{0:0.2f}\",\n                        \"wt\": \"{0:0.3f}\",\n                        \"qsec\": \"{0:0.2f}\",\n                    }\n                )\n                .set_table_styles(\n                    [dict(selector=\"th\", props=[(\"text-align\", \"right\")])]\n                )\n                .highlight_min(color=\"silver\")\n                .highlight_max(color=\"yellow\")\n            )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.navset_pill_list.html",
    "href": "reference/ui.navset_pill_list.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.navset_pill_list(args, id=None, selected=None, header=None, footer=None, well=True, widths=(4, 8))\nRender nav items as a vertical pillset.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*args\nshiny.types.NavSetArg\nA collection of nav items (e.g., :func:shiny.ui.nav).\n()\n\n\nid\nOptional[str]\nIf provided, will create an input value that holds the currently selected nav item.\nNone\n\n\nselected\nOptional[str]\nChoose a particular nav item to select by default value (should match it’s value).\nNone\n\n\nheader\nhtmltools.TagChild\nUI to display above the selected content.\nNone\n\n\nfooter\nhtmltools.TagChild\nUI to display below the selected content.\nNone\n\n\nwell\nbool\nTrue to place a well (gray rounded rectangle) around the navigation list.\nTrue\n\n\nfluid\n\nTrue to use fluid layout; False to use fixed layout.\nrequired\n\n\nwidths\ntuple[int, int]\nColumn widths of the navigation list and tabset content areas respectively.\n(4, 8)\n\n\n\n\n\n\n~shiny.ui.nav ~shiny.ui.nav_menu ~shiny.ui.nav_control ~shiny.ui.nav_spacer ~shiny.ui.navset_tab ~shiny.ui.navset_tab_card ~shiny.ui.navset_pill ~shiny.ui.navset_pill_card ~shiny.ui.navset_hidden ~shiny.ui.navset_bar ~shiny.ui.navset_hidden"
  },
  {
    "objectID": "reference/ui.navset_pill_list.html#example",
    "href": "reference/ui.navset_pill_list.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee nav"
  },
  {
    "objectID": "reference/ui.output_plot.html",
    "href": "reference/ui.output_plot.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.output_plot(id, width='100%', height='400px', inline=False, click=False, dblclick=False, hover=False, brush=False)\nCreate a output container for a static plot.\nPlace a :func:~shiny.render.plot result in the user interface. See :func:~shiny.render.plot for more details on what types of plots are supported.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nwidth\nstr\nThe CSS width, e.g. ‘400px’, or ‘100%’.\n'100%'\n\n\nheight\nstr\nThe CSS height, e.g. ‘100%’ or ‘600px’.\n'400px'\n\n\ninline\nbool\nIf True, the result is displayed inline.\nFalse\n\n\nclick\nbool | ClickOpts\nThis can be a boolean or an object created by :func:~shiny.ui.click_opts. The default is False, but if you use True (or equivalently, click_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_click(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position.\nFalse\n\n\ndblclick\nbool | DblClickOpts\nThis is just like the click parameter, but for double-click events.\nFalse\n\n\nhover\nbool | HoverOpts\nSimilar to the click argument, this can be a boolean or an object created by :func:~shiny.ui.hover_opts. The default is False, but if you use True (or equivalently, hover_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_hover(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, use :func:~shiny.ui.hover_opts.\nFalse\n\n\nbrush\nbool | BrushOpts\nSimilar to the click argument, this can be a boolean or an object created by :func:~shiny.ui.brush_opts. The default is False, but if you use True (or equivalently, brush_opts()), the plot will allow the user to “brush” in the plotting area, and will send information about the brushed area to the server, and the value will be accessible via input.plot_brush(). Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, use :func:~shiny.ui.brush_opts. Multiple output_image/output_plot calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.\nFalse\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n~shiny.render.plot ~shiny.ui.output_image"
  },
  {
    "objectID": "reference/ui.output_plot.html#examples",
    "href": "reference/ui.output_plot.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\n        \"n\", \"input_slider()\", min=10, max=100, value=50, step=5, animate=True\n    ),\n    ui.output_plot(\"p\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.plot\n    def p():\n        np.random.seed(19680801)\n        x_rand = 100 + 15 * np.random.randn(437)\n        fig, ax = plt.subplots()\n        ax.hist(x_rand, int(input.n()), density=True)\n        return fig\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.output_ui.html",
    "href": "reference/ui.output_ui.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.output_ui(id, inline=False, container=None, kwargs)\nCreate a output container for a UI (i.e., HTML) element.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\ninline\nbool\nIf True, the result is displayed inline\nFalse\n\n\ncontainer\nOptional[TagFunction]\nA Callable that returns the output container.\nNone\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to be applied to the output container.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n~shiny.render.ui ~shiny.ui.output_text"
  },
  {
    "objectID": "reference/ui.output_ui.html#examples",
    "href": "reference/ui.output_ui.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"add\", \"Add more controls\"),\n    ui.output_ui(\"moreControls\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.ui\n    @reactive.event(input.add)\n    def moreControls():\n        return ui.TagList(\n            ui.input_slider(\"n\", \"N\", min=1, max=1000, value=500),\n            ui.input_text(\"label\", \"Label\"),\n        )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.HTML.html",
    "href": "reference/ui.HTML.html",
    "title": "Shiny",
    "section": "",
    "text": "HTML()\nMark a string as raw HTML. This will prevent the string from being escaped when rendered inside an HTML tag."
  },
  {
    "objectID": "reference/ui.HTML.html#example",
    "href": "reference/ui.HTML.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\n\n\n\nfrom htmltools import HTML, div div(“\n\nHello\n\n“)\n\n<p>Hello</p>\n\ndiv(HTML(“\n\nHello\n\n“))\n\n\nHello\n\n\n\n\n\n\nMethods\n\n\n\nName\nDescription\n\n\n\n\nas_string\n\n\n\n\n\n\nas_string\nui.HTML.as_string(self)"
  },
  {
    "objectID": "reference/reactive.Value.html",
    "href": "reference/reactive.Value.html",
    "title": "Shiny",
    "section": "",
    "text": "reactive.Value(self, value=MISSING, read_only=False)\nCreate a reactive value\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nvalue\nT | MISSING_TYPE\nAn optional initial value.\nMISSING\n\n\nread_only\nbool\nIf True, then the reactive value cannot be set().\nFalse\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nAn instance of a reactive value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\n~shiny.types.SilentException\nIf :func:~Value.get is called before a value is provided/set."
  },
  {
    "objectID": "reference/reactive.Value.html#note",
    "href": "reference/reactive.Value.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nA reactive value may only be read from within a reactive function (e.g., :func:Calc, :func:Effect, :func:shiny.render.text, etc.) and, when doing so, the function takes a reactive dependency on the value (i.e., when the value changes, the calling reactive function will re-execute)."
  },
  {
    "objectID": "reference/reactive.Value.html#see-also",
    "href": "reference/reactive.Value.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.Inputs Calc Effect"
  },
  {
    "objectID": "reference/reactive.Value.html#examples",
    "href": "reference/reactive.Value.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"minus\", \"-1\"),\n    ui.input_action_button(\"plus\", \"+1\"),\n    ui.br(),\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    val = reactive.Value(0)\n\n    @reactive.Effect\n    @reactive.event(input.minus)\n    def _():\n        newVal = val.get() - 1\n        val.set(newVal)\n\n    @reactive.Effect\n    @reactive.event(input.plus)\n    def _():\n        newVal = val.get() + 1\n        val.set(newVal)\n\n    @output\n    @render.text\n    def value():\n        return str(val.get())\n\n\napp = App(app_ui, server)\n\n\nMethods\n\n\n\nName\nDescription\n\n\n\n\nfreeze\nFreeze the reactive value.\n\n\nget\nRead the reactive value.\n\n\nis_set\nCheck if the reactive value is set.\n\n\nset\nSet the reactive value to a new value.\n\n\nunset\nUnset the reactive value.\n\n\n\n\n\nfreeze\nreactive.Value.freeze(self)\nFreeze the reactive value.\nFreezing is equivalent to unsetting the value, but it does not invalidate dependents.\n\n\nget\nreactive.Value.get(self)\nRead the reactive value.\n\nReturns\n\n\n\nType\nDescription\n\n\n\n\nThe reactive value.\n\n\n\n\n\n\nRaises\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\n~shiny.types.SilentException\nIf the value is not set.\n\n\nRuntimeError\nIf called from outside a reactive function.\n\n\n\n\n\n\nis_set\nreactive.Value.is_set(self)\nCheck if the reactive value is set.\n\nReturns\n\n\n\nType\nDescription\n\n\n\n\nbool\n\n\n\n\n\n\n\nset\nreactive.Value.set(self, value)\nSet the reactive value to a new value.\n\nParameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nvalue\nshiny.reactive._reactives.T\nA value.\nrequired\n\n\n\n\n\nReturns\n\n\n\nType\nDescription\n\n\n\n\nbool\n\n\n\n\n\n\nRaises\n\n\n\nType\nDescription\n\n\n\n\nRuntimeError\nIf called on a read-only reactive value.\n\n\n\n\n\n\nunset\nreactive.Value.unset(self)\nUnset the reactive value.\n\nReturns\n\n\n\nType\nDescription\n\n\n\n\nNone"
  },
  {
    "objectID": "reference/ui.page_bootstrap.html",
    "href": "reference/ui.page_bootstrap.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.page_bootstrap(args, title=None, lang=None)\nCreate a Bootstrap UI page container.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\ntyping.Any\nUI elements.\n()\n\n\ntitle\nOptional[str]\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via :func:~shiny.ui.panel_title.\nNone\n\n\nlang\nOptional[str]\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\npage_fluid page_navbar"
  },
  {
    "objectID": "reference/ui.panel_absolute.html",
    "href": "reference/ui.panel_absolute.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.panel_absolute(args, top=None, left=None, right=None, bottom=None, width=None, height=None, draggable=False, fixed=False, cursor='auto', kwargs)\nCreate a panel of absolutely positioned content.\nCreates a <div> tag whose CSS position is set to absolute (or fixed if fixed = True). The way absolute positioning works in HTML is that absolute coordinates are specified relative to its nearest parent element whose position is not set to static (which is the default), and if no such parent is found, then relative to the page borders. If you’re not sure what that means, just keep in mind that you may get strange results if you use this function from inside of certain types of panels.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nTagChild | TagAttrs\nUI elements to include inside the panel.\n()\n\n\ntop\nOptional[str]\nDistance between the top of the panel, and the top of the page or parent container.\nNone\n\n\nleft\nOptional[str]\nDistance between the left side of the panel, and the left of the page or parent container.\nNone\n\n\nright\nOptional[str]\nDistance between the right side of the panel, and the right of the page or parent container.\nNone\n\n\nbottom\nOptional[str]\nDistance between the bottom of the panel, and the bottom of the page or parent container.\nNone\n\n\nwidth\nOptional[str]\nWidth of the panel.\nNone\n\n\nheight\nOptional[str]\nHeight of the panel.\nNone\n\n\ndraggable\nbool\nIf True, allows the user to move the panel by clicking and dragging.\nFalse\n\n\nfixed\nbool\nPositions the panel relative to the browser window and prevents it from being scrolled with the rest of the page.\nFalse\n\n\ncursor\nLiteral[auto, move, default, inherit]\nThe type of cursor that should appear when the user mouses over the panel. Use \"move\" for a north-east-south-west icon, \"default\" for the usual cursor arrow, or \"inherit\" for the usual cursor behavior (including changing to an I-beam when the cursor is over text). The default is \"auto\", which is equivalent to \"move\" if draggable else \"inherit\".\n'auto'\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes added to the content’s container tag.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element"
  },
  {
    "objectID": "reference/ui.panel_absolute.html#tip",
    "href": "reference/ui.panel_absolute.html#tip",
    "title": "Shiny",
    "section": "Tip",
    "text": "Tip\nThe position (top, left, right, bottom) and size (width, height) parameters are all optional, but you should specify exactly two of top, bottom, and height and exactly two of left, right, and width for predictable results.\nLike most other distance parameters in Shiny, the position and size parameters take a number (interpreted as pixels) or a valid CSS size string, such as \"100px\" (100 pixels) or \"25%\".\nFor arcane HTML reasons, to have the panel fill the page or parent you should specify 0 for top, left, right, and bottom rather than the more obvious width = \"100%\" and height = \"100%\"."
  },
  {
    "objectID": "reference/ui.panel_absolute.html#examples",
    "href": "reference/ui.panel_absolute.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"A basic absolute panel example\", \"Demo\"),\n    ui.panel_absolute(\n        ui.panel_well(\n            \"Drag me around!\", ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)\n        ),\n        draggable=True,\n        width=\"300px\",\n        right=\"50px\",\n        top=\"50%\",\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.remove_ui.html",
    "href": "reference/ui.remove_ui.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.remove_ui(selector, multiple=False, immediate=False, session=None)\nRemove UI objects\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nselector\nstr\nA string that is accepted by jQuery’s selector (i.e. the string x to be placed in a $(x) jQuery call) which determines the element(s) to remove. If you want to remove a Shiny input or output, note that many of these are wrapped in <div>s, so you may need to use a somewhat complex selector — see the Examples below. (Alternatively, you could also wrap the inputs/outputs that you want to be able to remove easily in a <div> with an id.)\nrequired\n\n\nmultiple\nbool\nIn case your selector matches more than one element, multiple determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).\nFalse\n\n\nimmediate\nbool\nWhether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).\nFalse\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone\n\n\n\n\n\n\n~shiny.ui.insert_ui ~shiny.render.ui"
  },
  {
    "objectID": "reference/ui.remove_ui.html#examples",
    "href": "reference/ui.remove_ui.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"rmv\", \"Remove UI\"),\n    ui.input_text(\"txt\", \"Click button above to remove me\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    @reactive.event(input.rmv)\n    def _():\n        ui.remove_ui(selector=\"div:has(> #txt)\")\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/render.text.html",
    "href": "reference/render.text.html",
    "title": "Shiny",
    "section": "",
    "text": "render.text(fn=None)\nReactively render text.\n\n\n\n\n\nType\nDescription\n\n\n\n\nA decorator for a function that returns a string."
  },
  {
    "objectID": "reference/render.text.html#tip",
    "href": "reference/render.text.html#tip",
    "title": "Shiny",
    "section": "Tip",
    "text": "Tip\nThis decorator should be applied before the @output decorator. Also, the name of the decorated function (or @output(id=...)) should match the id of a :func:~shiny.ui.output_text container (see :func:~shiny.ui.output_text for example usage)."
  },
  {
    "objectID": "reference/render.text.html#see-also",
    "href": "reference/render.text.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.output_text"
  },
  {
    "objectID": "reference/ui.navset_pill_card.html",
    "href": "reference/ui.navset_pill_card.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.navset_pill_card(args, id=None, selected=None, header=None, footer=None, placement='above')\nRender nav items as a pillset inside a card container.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*args\nshiny.types.NavSetArg\nA collection of nav items (e.g., :func:shiny.ui.nav).\n()\n\n\nid\nOptional[str]\nIf provided, will create an input value that holds the currently selected nav item.\nNone\n\n\nselected\nOptional[str]\nChoose a particular nav item to select by default value (should match it’s value).\nNone\n\n\nheader\nhtmltools.TagChild\nUI to display above the selected content.\nNone\n\n\nfooter\nhtmltools.TagChild\nUI to display below the selected content.\nNone\n\n\nplacement\nLiteral[above, below]\nPlacement of the nav items relative to the content.\n'above'\n\n\n\n\n\n\n~shiny.ui.nav ~shiny.ui.nav_menu ~shiny.ui.nav_control ~shiny.ui.nav_spacer ~shiny.ui.navset_bar ~shiny.ui.navset_tab ~shiny.ui.navset_pill ~shiny.ui.navset_tab_card ~shiny.ui.navset_hidden"
  },
  {
    "objectID": "reference/ui.navset_pill_card.html#example",
    "href": "reference/ui.navset_pill_card.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee nav"
  },
  {
    "objectID": "reference/ui.input_slider.html",
    "href": "reference/ui.input_slider.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_slider(id, label, min, max, value, step=None, ticks=True, animate=False, width=None, sep=',', pre=None, post=None, time_format=None, timezone=None, drag_range=True)\nConstructs a slider widget to select a number, date, or date-time from a range.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nmin\nshiny.ui._input_slider.SliderValueArg\nThe minimum allowed value.\nrequired\n\n\nmax\nshiny.ui._input_slider.SliderValueArg\nThe maximum allowed value.\nrequired\n\n\nvalue\nSliderValueArg | Iterable[SliderValueArg]\nInitial value.\nrequired\n\n\nstep\nOptional[SliderStepArg]\nInterval to use when stepping between min and max.\nNone\n\n\nticks\nbool\nFalse to hide tick marks, True to show them according to some simple heuristics.\nTrue\n\n\nanimate\nbool | AnimationOptions\nTrue to show simple animation controls with default settings; False not to; or a custom settings list, such as those created using :class:AnimationOptions().\nFalse\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\nsep\nstr\nSeparator between thousands places in numbers.\n','\n\n\npre\nOptional[str]\nA prefix string to put in front of the value.\nNone\n\n\npost\nOptional[str]\nA suffix string to put after the value.\nNone\n\n\ntime_format\nOptional[str]\nOnly used if the slider values are :func:~datetime.date or :func:~datetime.datetime objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is “%F” (like “2015-07-01”), and for Datetimes, the default is “%F %T” (like “2015-07-01 15:32:10”).\nNone\n\n\ntimezone\nOptional[str]\nOnly used if the values are :func:~datetime.datetime objects. A string specifying the time zone offset for the displayed times, in the format “+HHMM” or “-HHMM”. If None (the default), times will be displayed in the browser’s time zone. The value “+0000” will result in UTC time.\nNone\n\n\ndrag_range\nbool\nThis option is used only if it is a range slider (with two values). If True (the default), the range can be dragged. In other words, the min and max can be dragged together. If False, the range cannot be dragged.\nTrue\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n.. admonition:: Server value\nA number, date, or date-time (depending on the class of value), or in the case of slider range, a list of two numbers/dates/date-times."
  },
  {
    "objectID": "reference/ui.input_slider.html#see-also",
    "href": "reference/ui.input_slider.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.update_slider"
  },
  {
    "objectID": "reference/ui.input_slider.html#examples",
    "href": "reference/ui.input_slider.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"obs\", \"Number of bins:\", min=10, max=100, value=30),\n    ui.output_plot(\"distPlot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.plot\n    def distPlot():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.obs(), density=True)\n        return fig\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/render.table.html",
    "href": "reference/render.table.html",
    "title": "Shiny",
    "section": "",
    "text": "render.table(fn=None, index=False, classes='table shiny-table w-auto', border=0, kwargs)\nReactively render a Pandas data frame object (or similar) as a basic HTML table.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nindex\nbool\nWhether to print index (row) labels. (Ignored for pandas :class:Styler objects; call style.hide(axis=\"index\") from user code instead.)\nFalse\n\n\nclasses\nstr\nCSS classes (space separated) to apply to the resulting table. By default, we use table shiny-table w-auto which is designed to look reasonable with Bootstrap 5. (Ignored for pandas :class:Styler objects; call style.set_table_attributes('class=\"dataframe table shiny-table w-auto\"') from user code instead.)\n'table shiny-table w-auto'\n\n\n**kwargs\ntyping.Any\nAdditional keyword arguments passed to pandas.DataFrame.to_html() or pandas.io.formats.style.Styler.to_html().\n{}\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA decorator for a function that returns any of the following\n1. A pandas :class:DataFrame object.\n\n\n\n\nA pandas :class:Styler object.\nAny object that has a .to_pandas() method (e.g., a Polars data frame or Arrow table). |"
  },
  {
    "objectID": "reference/render.table.html#tip",
    "href": "reference/render.table.html#tip",
    "title": "Shiny",
    "section": "Tip",
    "text": "Tip\nThis decorator should be applied before the @output decorator. Also, the name of the decorated function (or @output(id=...)) should match the id of a :func:~shiny.ui.output_table container (see :func:~shiny.ui.output_table for example usage)."
  },
  {
    "objectID": "reference/render.table.html#see-also",
    "href": "reference/render.table.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.output_table"
  },
  {
    "objectID": "reference/ui.update_navs.html",
    "href": "reference/ui.update_navs.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_navs(id, selected=None, session=None)\nChange the value of a navs container on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nselected\nOptional[str]\nThe values that should be initially selected, if any.\nNone\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.update_navs.html#note",
    "href": "reference/ui.update_navs.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_navs.html#see-also",
    "href": "reference/ui.update_navs.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.navset_tab ~shiny.ui.navset_pill ~shiny.ui.page_navbar"
  },
  {
    "objectID": "reference/ui.update_navs.html#examples",
    "href": "reference/ui.update_navs.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"controller\", \"Controller\", min=1, max=3, value=1)\n        ),\n        ui.panel_main(\n            ui.navset_tab_card(\n                ui.nav(\"Panel 1\", \"Panel 1 content\", value=\"panel1\"),\n                ui.nav(\"Panel 2\", \"Panel 2 content\", value=\"panel2\"),\n                ui.nav(\"Panel 3\", \"Panel 3 content\", value=\"panel3\"),\n                id=\"inTabset\",\n            )\n        ),\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        ui.update_navs(\"inTabset\", selected=\"panel\" + str(input.controller()))\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/reactive.flush.html",
    "href": "reference/reactive.flush.html",
    "title": "Shiny",
    "section": "",
    "text": "reactive.flush()\nRun any pending invalidations (i.e., flush the reactive environment)."
  },
  {
    "objectID": "reference/reactive.flush.html#warning",
    "href": "reference/reactive.flush.html#warning",
    "title": "Shiny",
    "section": "Warning",
    "text": "Warning\nThis function shouldn’t ever need to be called inside a Shiny app. It’s only useful for testing and running reactive code interactively in the console."
  },
  {
    "objectID": "reference/ui.update_slider.html",
    "href": "reference/ui.update_slider.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_slider(id, label=None, value=None, min=None, max=None, step=None, time_format=None, timezone=None, session=None)\nChange the value of a slider input on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nOptional[str]\nAn input label.\nNone\n\n\nvalue\nOptional[SliderValueArg | tuple[SliderValueArg, SliderValueArg]]\nA new value.\nNone\n\n\nmin\nOptional[SliderValueArg]\nThe minimum allowed value.\nNone\n\n\nmax\nOptional[SliderValueArg]\nThe maximum allowed value.\nNone\n\n\nstep\nOptional[SliderStepArg]\nSpecifies the interval between each selectable value on the slider. Either None (the default), which uses a heuristic to determine the step size or a single number. If the values are dates, step is in days; if the values are date-times, step is in seconds.\nNone\n\n\ntime_format\nOptional[str]\nOnly used if the slider values are :func:~datetime.date or :func:~datetime.datetime objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is “%F” (like “2015-07-01”), and for Datetimes, the default is “%F %T” (like “2015-07-01 15:32:10”).\nNone\n\n\ntimezone\nOptional[str]\nOnly used if the values are :func:~datetime.datetime objects. A string specifying the time zone offset for the displayed times, in the format “+HHMM” or “-HHMM”. If None (the default), times will be displayed in the browser’s time zone. The value “+0000” will result in UTC time.\nNone\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.update_slider.html#note",
    "href": "reference/ui.update_slider.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_slider.html#see-also",
    "href": "reference/ui.update_slider.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_slider"
  },
  {
    "objectID": "reference/ui.update_slider.html#examples",
    "href": "reference/ui.update_slider.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.tags.p(\"The first slider controls the second\"),\n            ui.input_slider(\"control\", \"Controller:\", min=0, max=20, value=10, step=1),\n            ui.input_slider(\"receive\", \"Receiver:\", min=0, max=20, value=10, step=1),\n        ),\n        ui.panel_main(),\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        val = input.control()\n        # Control the value, min, max, and step.\n        # Step size is 2 when input value is even; 1 when value is odd.\n        ui.update_slider(\n            \"receive\", value=val, min=int(val / 2), max=val + 4, step=(val + 1) % 2 + 1\n        )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/Outputs.html",
    "href": "reference/Outputs.html",
    "title": "Shiny",
    "section": "",
    "text": "session.Outputs(self, session, ns, effects, suspend_when_hidden)\nA class representing Shiny output definitions."
  },
  {
    "objectID": "reference/ui.input_selectize.html",
    "href": "reference/ui.input_selectize.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_selectize(id, label, choices, selected=None, multiple=False, width=None)\nCreate a select list that can be used to choose a single or multiple items from a list of values.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nchoices\nshiny.ui._input_select.SelectChoicesArg\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\nrequired\n\n\nselected\nOptional[str | list[str]]\nThe values that should be initially selected, if any.\nNone\n\n\nmultiple\nbool\nIs selection of multiple items allowed?\nFalse\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\n.. admonition:: Server value\nA list of strings, usually of length 1, with the value of the selected items. When\n``multiple=True`` and nothing is selected, this value will be ``None``."
  },
  {
    "objectID": "reference/ui.input_selectize.html#see-also",
    "href": "reference/ui.input_selectize.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_select ~shiny.ui.input_radio_buttons ~shiny.ui.input_checkbox_group"
  },
  {
    "objectID": "reference/ui.input_selectize.html#examples",
    "href": "reference/ui.input_selectize.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(\n        \"state\",\n        \"Choose a state:\",\n        {\n            \"East Coast\": {\"NY\": \"New York\", \"NJ\": \"New Jersey\", \"CT\": \"Connecticut\"},\n            \"West Coast\": {\"WA\": \"Washington\", \"OR\": \"Oregon\", \"CA\": \"California\"},\n            \"Midwest\": {\"MN\": \"Minnesota\", \"WI\": \"Wisconsin\", \"IA\": \"Iowa\"},\n        },\n        multiple=True,\n    ),\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def value():\n        return \"You choose: \" + str(input.state())\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.update_date_range.html",
    "href": "reference/ui.update_date_range.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_date_range(id, label=None, start=None, end=None, min=None, max=None, session=None)\nChange the start and end values of a date range input on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nOptional[str]\nAn input label.\nNone\n\n\nstart\nOptional[date | str]\nThe initial start date. Either a :func:~datetime.date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client’s time zone.\nNone\n\n\nend\nOptional[date | str]\nThe initial end date. Either a :func:~datetime.date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client’s time zone.\nNone\n\n\nmin\nOptional[date | str]\nThe minimum allowed value.\nNone\n\n\nmax\nOptional[date | str]\nThe maximum allowed value.\nNone\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.update_date_range.html#note",
    "href": "reference/ui.update_date_range.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_date_range.html#see-also",
    "href": "reference/ui.update_date_range.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_date_range"
  },
  {
    "objectID": "reference/ui.update_date_range.html#examples",
    "href": "reference/ui.update_date_range.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom datetime import date, timedelta\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Day of month\", min=1, max=30, value=10),\n    ui.input_date_range(\"inDateRange\", \"Input date\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        d = date(2013, 4, input.n())\n        ui.update_date_range(\n            \"inDateRange\",\n            label=\"Date range label \" + str(input.n()),\n            start=d - timedelta(days=1),\n            end=d + timedelta(days=1),\n            min=d - timedelta(days=5),\n            max=d + timedelta(days=5),\n        )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/run_app.html",
    "href": "reference/run_app.html",
    "title": "Shiny",
    "section": "",
    "text": "run_app(app='app:app', host='127.0.0.1', port=8000, autoreload_port=0, reload=False, ws_max_size=16777216, log_level=None, app_dir='.', factory=False, launch_browser=False)\nStarts a Shiny app. Press Ctrl+C (or Ctrl+Break on Windows) to stop.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\napp\nstr | shiny.App\nThe app to run. The default, app:app, represents the “usual” case where the application is named app inside a app.py file within the current working directory. In other cases, the app location can be specified as a <module>:<attribute> string where the :<attribute> is only necessary if the application is named something other than app. Note that <module> can be relative path to a .py file or a directory (with an app.py file inside it); and in this case, the relative path is resolved relative to the app_dir directory.\n'app:app'\n\n\nhost\nstr\nThe address that the app should listen on.\n'127.0.0.1'\n\n\nport\nint\nThe port that the app should listen on. Set to 0 to use a random port.\n8000\n\n\nautoreload_port\nint\nThe port that should be used for an additional websocket that is used to support hot-reload. Set to 0 to use a random port.\n0\n\n\nreload\nbool\nEnable auto-reload.\nFalse\n\n\nws_max_size\nint\nWebSocket max size message in bytes.\n16777216\n\n\nlog_level\nOptional[str]\nLog level.\nNone\n\n\napp_dir\nOptional[str]\nLook for app under this directory (by adding this to the PYTHONPATH).\n'.'\n\n\nfactory\nbool\nTreat app as an application factory, i.e. a () ->  callable.\nFalse\n\n\nlaunch_browser\nbool\nLaunch app browser after app starts, using the Python webbrowser module.\nFalse\n\n\n\nTip\n\nThe shiny run command-line interface (which comes installed with Shiny) provides the same functionality as this function.\n\n\n\n.. code-block:: python\nfrom shiny import run_app\n\n# Run ``app`` inside ``./app.py``\nrun_app()\n\n# Run ``app`` inside ``./myapp.py`` (or ``./myapp/app.py``)\nrun_app(\"myapp\")\n\n# Run ``my_app`` inside ``./myapp.py`` (or ``./myapp/app.py``)\nrun_app(\"myapp:my_app\")\n\n# Run ``my_app`` inside ``../myapp.py`` (or ``../myapp/app.py``)\nrun_app(\"myapp:my_app\", app_dir=\"..\")"
  },
  {
    "objectID": "reference/ui.modal_show.html",
    "href": "reference/ui.modal_show.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.modal_show(modal, session=None)\nShow a modal dialog.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmodal\nhtmltools.Tag\nTypically a :func:modal instance.\nrequired\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone\n\n\n\n\n\n\n~shiny.ui.modal_remove ~shiny.ui.modal"
  },
  {
    "objectID": "reference/ui.modal_show.html#example",
    "href": "reference/ui.modal_show.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee ."
  },
  {
    "objectID": "reference/ui.input_action_button.html",
    "href": "reference/ui.input_action_button.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_action_button(id, label, icon=None, width=None, kwargs)\nCreates an action button whose value is initially zero, and increments by one each time it is pressed.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nicon\nhtmltools.TagChild\nAn icon to appear inline with the button/link.\nNone\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to be applied to the button.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n.. admonition:: Server value\nAn integer representing the number of clicks."
  },
  {
    "objectID": "reference/ui.input_action_button.html#see-also",
    "href": "reference/ui.input_action_button.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_action_link ~shiny.event"
  },
  {
    "objectID": "reference/ui.input_action_button.html#examples",
    "href": "reference/ui.input_action_button.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500),\n    ui.input_action_button(\"go\", \"Go!\", class_=\"btn-success\"),\n    ui.output_plot(\"plot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    # Use reactive.event() to invalidate the plot only when the button is pressed\n    # (not when the slider is changed)\n    @reactive.event(input.go, ignore_none=False)\n    def plot():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(input.n())\n        fig, ax = plt.subplots()\n        ax.hist(x, bins=30, density=True)\n        return fig\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/render.image.html",
    "href": "reference/render.image.html",
    "title": "Shiny",
    "section": "",
    "text": "render.image(fn=None, delete_file=False)\nReactively render a image file as an HTML image.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndelete_file\nbool\nIf True, the image file will be deleted after rendering.\nFalse\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA decorator for a function that returns an"
  },
  {
    "objectID": "reference/render.image.html#tip",
    "href": "reference/render.image.html#tip",
    "title": "Shiny",
    "section": "Tip",
    "text": "Tip\nThis decorator should be applied before the @output decorator. Also, the name of the decorated function (or @output(id=...)) should match the id of a :func:~shiny.ui.output_image container (see :func:~shiny.ui.output_image for example usage)."
  },
  {
    "objectID": "reference/render.image.html#see-also",
    "href": "reference/render.image.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.output_image ~shiny.types.ImgData ~shiny.render.plot"
  },
  {
    "objectID": "reference/ui.update_switch.html",
    "href": "reference/ui.update_switch.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_switch(id, label=None, value=None, session=None)\nChange the value of a switch input on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nOptional[str]\nAn input label.\nNone\n\n\nvalue\nOptional[bool]\nA new value.\nNone\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.update_switch.html#note",
    "href": "reference/ui.update_switch.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_switch.html#see-also",
    "href": "reference/ui.update_switch.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_switch"
  },
  {
    "objectID": "reference/ui.navset_pill.html",
    "href": "reference/ui.navset_pill.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.navset_pill(args, id=None, selected=None, header=None, footer=None)\nRender nav items as a pillset.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*args\nshiny.types.NavSetArg\nA collection of nav items (e.g., :func:shiny.ui.nav).\n()\n\n\nid\nOptional[str]\nIf provided, will create an input value that holds the currently selected nav item.\nNone\n\n\nselected\nOptional[str]\nChoose a particular nav item to select by default value (should match it’s value).\nNone\n\n\nheader\nhtmltools.TagChild\nUI to display above the selected content.\nNone\n\n\nfooter\nhtmltools.TagChild\nUI to display below the selected content.\nNone\n\n\n\n\n\n\n~shiny.ui.nav ~shiny.ui.nav_menu ~shiny.ui.nav_control ~shiny.ui.nav_spacer ~shiny.ui.navset_bar ~shiny.ui.navset_tab ~shiny.ui.navset_tab_card ~shiny.ui.navset_pill_card ~shiny.ui.navset_hidden"
  },
  {
    "objectID": "reference/ui.navset_pill.html#example",
    "href": "reference/ui.navset_pill.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee nav"
  },
  {
    "objectID": "reference/ui.notification_remove.html",
    "href": "reference/ui.notification_remove.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.notification_remove(id, session=None)\nRemove a notification.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nA notification id.\nrequired\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nThe notification’s\n\n\n\n\n\n\n\n~shiny.ui.notification_show ~shiny.ui.modal"
  },
  {
    "objectID": "reference/ui.notification_remove.html#example",
    "href": "reference/ui.notification_remove.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee ."
  },
  {
    "objectID": "reference/ui.help_text.html",
    "href": "reference/ui.help_text.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.help_text(args, kwargs)\nCreate a help text element\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nTagChild | TagAttrs\nUI elements to include inside the help text.\n()\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to add to the text container.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element"
  },
  {
    "objectID": "reference/ui.update_checkbox_group.html",
    "href": "reference/ui.update_checkbox_group.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_checkbox_group(id, label=None, choices=None, selected=None, inline=False, session=None)\nChange the value of a checkbox group input on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nOptional[str]\nAn input label.\nNone\n\n\nchoices\nOptional[ChoicesArg]\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\nNone\n\n\nselected\nOptional[str | list[str]]\nThe values that should be initially selected, if any.\nNone\n\n\ninline\nbool\nIf True, the result is displayed inline\nFalse\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.update_checkbox_group.html#note",
    "href": "reference/ui.update_checkbox_group.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_checkbox_group.html#see-also",
    "href": "reference/ui.update_checkbox_group.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_checkbox_group"
  },
  {
    "objectID": "reference/ui.update_checkbox_group.html#examples",
    "href": "reference/ui.update_checkbox_group.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.tags.p(\"The first checkbox group controls the second\"),\n    ui.input_checkbox_group(\n        \"inCheckboxGroup\", \"Input checkbox\", [\"Item A\", \"Item B\", \"Item C\"]\n    ),\n    ui.input_checkbox_group(\n        \"inCheckboxGroup2\", \"Input checkbox 2\", [\"Item A\", \"Item B\", \"Item C\"]\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        x = input.inCheckboxGroup()\n\n        if x is None:\n            x = []\n        elif isinstance(x, str):\n            x = [x]\n\n        # Can also set the label and select items\n        ui.update_checkbox_group(\n            \"inCheckboxGroup2\",\n            label=\"Checkboxgroup label \" + str(len(x)),\n            choices=x,\n            selected=x,\n        )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.input_date.html",
    "href": "reference/ui.input_date.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_date(id, label, value=None, min=None, max=None, format='yyyy-mm-dd', startview='month', weekstart=0, language='en', width=None, autoclose=True, datesdisabled=None, daysofweekdisabled=None)\nCreates a text input which, when clicked on, brings up a calendar that the user can click on to select dates.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nvalue\nOptional[date | str]\nThe starting date. Either a :func:~datetime.date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client’s time zone.\nNone\n\n\nmin\nOptional[date | str]\nThe minimum allowed date. Either a :func:~datetime.date object, or a string in yyyy-mm-dd format.\nNone\n\n\nmax\nOptional[date | str]\nThe maximum allowed date. Either a :func:~datetime.date object, or a string in yyyy-mm-dd format.\nNone\n\n\nformat\nstr\nThe format of the date to display in the browser. Defaults to \"yyyy-mm-dd\".\n'yyyy-mm-dd'\n\n\nstartview\nstr\nThe date range shown when the input object is first clicked. Can be “month” (the default), “year”, or “decade”.\n'month'\n\n\nweekstart\nint\nWhich day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).\n0\n\n\nlanguage\nstr\nThe language used for month and day names. Default is “en”. Other valid values include “ar”, “az”, “bg”, “bs”, “ca”, “cs”, “cy”, “da”, “de”, “el”, “en-AU”, “en-GB”, “eo”, “es”, “et”, “eu”, “fa”, “fi”, “fo”, “fr-CH”, “fr”, “gl”, “he”, “hr”, “hu”, “hy”, “id”, “is”, “it-CH”, “it”, “ja”, “ka”, “kh”, “kk”, “ko”, “kr”, “lt”, “lv”, “me”, “mk”, “mn”, “ms”, “nb”, “nl-BE”, “nl”, “no”, “pl”, “pt-BR”, “pt”, “ro”, “rs-latin”, “rs”, “ru”, “sk”, “sl”, “sq”, “sr-latin”, “sr”, “sv”, “sw”, “th”, “tr”, “uk”, “vi”, “zh-CN”, and “zh-TW”.\n'en'\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\nautoclose\nbool\nWhether or not to close the datepicker immediately when a date is selected.\nTrue\n\n\ndatesdisabled\nOptional[list[str]]\nWhich dates should be disabled (in yyyy-mm-dd format).\nNone\n\n\ndaysofweekdisabled\nOptional[list[int]]\nDays of the week that should be disabled. Should be a integer vector with values from 0 (Sunday) to 6 (Saturday).\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element."
  },
  {
    "objectID": "reference/ui.input_date.html#note",
    "href": "reference/ui.input_date.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nThe date format string specifies how the date will be displayed in the browser. It allows the following values:\n\nyy: Year without century (12)\nyyyy: Year with century (2012)\nmm: Month number, with leading zero (01-12)\nm: Month number, without leading zero (1-12)\nM: Abbreviated month name\nMM: Full month name\ndd: Day of month with leading zero\nd: Day of month without leading zero\nD: Abbreviated weekday name\nDD: Full weekday name"
  },
  {
    "objectID": "reference/ui.input_date.html#notes",
    "href": "reference/ui.input_date.html#notes",
    "title": "Shiny",
    "section": "Notes",
    "text": "Notes\n.. admonition:: Server value\nA :func:`~datetime.date` object."
  },
  {
    "objectID": "reference/ui.input_date.html#see-also",
    "href": "reference/ui.input_date.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.update_date ~shiny.ui.input_date_range"
  },
  {
    "objectID": "reference/ui.input_date.html#examples",
    "href": "reference/ui.input_date.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom datetime import date\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_date(\"date1\", \"Date:\", value=\"2016-02-29\"),\n    # Default value is the date in client's time zone\n    ui.input_date(\"date2\", \"Date:\"),\n    # value is always yyyy-mm-dd, even if the display format is different\n    ui.input_date(\"date3\", \"Date:\", value=\"2016-02-29\", format=\"mm/dd/yy\"),\n    # Pass in a Date object\n    ui.input_date(\"date4\", \"Date:\", value=date(2016, 2, 29)),\n    # Use different language and different first day of week\n    ui.input_date(\"date5\", \"Date:\", language=\"ru\", weekstart=1),\n    # Start with decade view instead of default month view\n    ui.input_date(\"date6\", \"Date:\", startview=\"decade\"),\n    # Disable Mondays and Tuesdays.\n    ui.input_date(\"date7\", \"Date:\", daysofweekdisabled=[1, 2]),\n    # Disable specific dates.\n    ui.input_date(\n        \"date8\",\n        \"Date:\",\n        value=\"2016-02-29\",\n        datesdisabled=[\"2016-03-01\", \"2016-03-02\"],\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.input_numeric.html",
    "href": "reference/ui.input_numeric.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_numeric(id, label, value, min=None, max=None, step=None, width=None)\nCreate an input control for entry of numeric values.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nvalue\nfloat\nInitial value.\nrequired\n\n\nmin\nOptional[float]\nThe minimum allowed value.\nNone\n\n\nmax\nOptional[float]\nThe maximum allowed value.\nNone\n\n\nstep\nOptional[float]\nInterval to use when stepping between min and max.\nNone\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\n.. admonition:: Server value\nA numeric value."
  },
  {
    "objectID": "reference/ui.input_numeric.html#see-also",
    "href": "reference/ui.input_numeric.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.update_numeric"
  },
  {
    "objectID": "reference/ui.input_numeric.html#examples",
    "href": "reference/ui.input_numeric.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"obs\", \"Observations:\", 10, min=1, max=100),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def value():\n        return input.obs()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.nav_spacer.html",
    "href": "reference/ui.nav_spacer.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.nav_spacer()\nCreate space between nav items."
  },
  {
    "objectID": "reference/ui.nav_spacer.html#see-also",
    "href": "reference/ui.nav_spacer.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.nav ~shiny.ui.nav_menu ~shiny.ui.nav_control ~shiny.ui.navset_bar ~shiny.ui.navset_tab ~shiny.ui.navset_pill ~shiny.ui.navset_tab_card ~shiny.ui.navset_pill_card ~shiny.ui.navset_hidden"
  },
  {
    "objectID": "reference/ui.nav_spacer.html#example",
    "href": "reference/ui.nav_spacer.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee :func:~shiny.ui.nav"
  },
  {
    "objectID": "reference/ui.input_file.html",
    "href": "reference/ui.input_file.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_file(id, label, multiple=False, accept=None, width=None, button_label='Browse...', placeholder='No file selected', capture=None)\nCreate a file upload control that can be used to upload one or more files.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nmultiple\nbool\nWhether the user should be allowed to select and upload multiple files at once.\nFalse\n\n\naccept\nOptional[str | list[str]]\nUnique file type specifier(s) which give the browser a hint as to the type of file the server expects. Many browsers use this to prevent the user from selecting an invalid file. Examples of valid values include: * A case insensitive extension like .csv or .rds. * A valid MIME type, like text/plain or application/pdf * One of audio/*, video/*, or image/* meaning any audio, video, or image type, respectively.\nNone\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\nbutton_label\nstr\nThe label used on the button.\n'Browse...'\n\n\nplaceholder\nstr\nThe text to show on the input before a file has been uploaded.\n'No file selected'\n\n\ncapture\nOptional[Literal[environment, user]]\nOn mobile devices, this can be used to open the device’s camera for input. If “environment”, it will open the rear-facing camera. If “user”, it will open the front-facing camera. By default, it will accept either still photos or video. To accept only still photos, use accept=\"image/*\"; to accept only video, use accept=\"video/*\".\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\n.. admonition:: Server value\nA list of dictionaries (one for each file upload) with the following keys:\n\n* name: The filename provided by the web browser. This is *not* the path to read\n  to get at the actual data that was uploaded (see 'datapath').\n* size: The size of the uploaded data, in bytes.\n* type: The MIME type reported by the browser (for example, 'text/plain'), or\n  empty string if the browser didn't know.\n* datapath: The path to a temp file that contains the data that was uploaded.\n  This file may be deleted if the user performs another upload operation."
  },
  {
    "objectID": "reference/ui.input_file.html#see-also",
    "href": "reference/ui.input_file.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.download_button"
  },
  {
    "objectID": "reference/ui.input_file.html#examples",
    "href": "reference/ui.input_file.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport pandas as pd\n\nfrom shiny import *\nfrom shiny.types import FileInfo\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_file(\"file1\", \"Choose CSV File\", accept=[\".csv\"], multiple=False),\n            ui.input_checkbox(\"header\", \"Header\", True),\n        ),\n        ui.panel_main(ui.output_ui(\"contents\")),\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.ui\n    def contents():\n        if input.file1() is None:\n            return \"Please upload a csv file\"\n        f: list[FileInfo] = input.file1()\n        df = pd.read_csv(f[0][\"datapath\"], header=0 if input.header() else None)\n        return ui.HTML(df.to_html(classes=\"table table-striped\"))\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/session.get_current_session.html",
    "href": "reference/session.get_current_session.html",
    "title": "Shiny",
    "section": "",
    "text": "session.get_current_session()\nGet the current user session.\n\n\n\n\n\nType\nDescription\n\n\n\n\nThe current session if one is active, otherwise"
  },
  {
    "objectID": "reference/session.get_current_session.html#note",
    "href": "reference/session.get_current_session.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nShiny apps should not need to call this function directly. Instead, it’s intended to be used by Shiny developing who wish to create new functions that should only be called from within an active Shiny session."
  },
  {
    "objectID": "reference/session.get_current_session.html#see-also",
    "href": "reference/session.get_current_session.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~require_active_session"
  },
  {
    "objectID": "reference/Inputs.html",
    "href": "reference/Inputs.html",
    "title": "Shiny",
    "section": "",
    "text": "session.Inputs(self, values, ns=Root)\nA class representing Shiny input values.\nThis class provides access to a :class:~shiny.session.Session’s input values. The input values are reactive :class:~shiny.reactive.Values, and can be accessed with the [] operator, or with .. For example, if there is an input named x, it can be accessed via input[\"x\"]() or input.x()."
  },
  {
    "objectID": "reference/types.ImgData.html",
    "href": "reference/types.ImgData.html",
    "title": "Shiny",
    "section": "",
    "text": "types.ImgData()\nReturn type for :func:~shiny.render.image."
  },
  {
    "objectID": "reference/types.ImgData.html#see-also",
    "href": "reference/types.ImgData.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.render.image"
  },
  {
    "objectID": "reference/types.ImgData.html#example",
    "href": "reference/types.ImgData.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee :func:~shiny.render.image."
  },
  {
    "objectID": "reference/types.SilentException.html",
    "href": "reference/types.SilentException.html",
    "title": "Shiny",
    "section": "",
    "text": "types.SilentException()\nThrow a silent exception.\nNormally, when an exception occurs inside a reactive context, it’s either:\n\nDisplayed to the user (as a big red error message)\n\nThis happens when the exception is raised from an output context (e.g., :func:shiny.render.ui)\n\nCrashes the application\n\nThis happens when the exception is raised from an :func:shiny.reactive.Effect\n\n\nThis exception is used to silently throw inside a reactive context, meaning that execution is paused, and no output is shown to users (or the python console)."
  },
  {
    "objectID": "reference/types.SilentException.html#see-also",
    "href": "reference/types.SilentException.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~SilentCancelOutputException"
  },
  {
    "objectID": "reference/types.SilentException.html#examples",
    "href": "reference/types.SilentException.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\nfrom shiny.types import SilentException\n\napp_ui = ui.page_fluid(\n    ui.input_text(\n        \"txt\",\n        \"Enter text to see it displayed below the input\",\n        width=\"400px\",\n    ),\n    ui.output_ui(\"txt_out\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.ui\n    def txt_out():\n        if not input.txt():\n            raise SilentException()\n        return \"Your input: \" + input.txt()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Shiny",
    "section": "",
    "text": "This website documents the public API of Shiny (for Python). See the Getting Started tutorial <https://shiny.rstudio.com/py/>_ for a more approachable introduction to the API. The left-hand sidebar lists the full public API, without any grouping, but the sections below (linked to the right-hand sidebar) break it into semantically similar groups. Most of the reference pages include a live example app at the bottom, or at least mention another page with a relevant example.\nWe’ve intentionally designed Shiny’s API so that you can from shiny import * to get access to most of what you need for most apps without introducing an excessive amount of namespace pollution. Namely, it gives you:\n\nUser interface (UI/HTML) helpers, available via the ui subpackage.\n\nTo avoid clashing with this ui namespace when you do from shiny import *, you’ll want to name you UI object something else, like app_ui.\n\nReactive programming utilities, available via the reactive subpackage.\nDecorators for rendering output, available via the render subpackage.\n\n3rd party packages that want to implement their own rendering functions are encouraged to use a @render_foo() naming convention so users may import with from mypkg import render_foo.\n\nA handful of other things you’ll want for most apps (e.g., App, Module, etc).\nIf you’re using type checking, you’ll also want to use the Inputs, Outputs, and Session Classes to type the instances supplied to your server function, for example:\n\n.. shinylive-editor::\n\n    from shiny import *\n\n    app_ui = ui.page_fluid(\n      ui.input_slider(\"n\", \"Value of n\", min=1, max=10, value=5),\n      ui.output_text(\"n2\")\n    )\n\n    def server(input: Inputs, output: Outputs, session: Session) -> None:\n        @output\n        @render.text\n        def n2():\n            return f\"The value of n*2 is {input.n() * 2}\"\n\n    app = App(app_ui, server)"
  },
  {
    "objectID": "reference/index.html#page-containers",
    "href": "reference/index.html#page-containers",
    "title": "Shiny",
    "section": "Page containers",
    "text": "Page containers\nCreate a user interface page container.\n\n\n\nui.page_navbar\nCreate a navbar with a navs bar and a title.\n\n\nui.page_fluid\nCreate a fluid page.\n\n\nui.page_fixed\nCreate a fixed page.\n\n\nui.page_bootstrap\nCreate a Bootstrap UI page container."
  },
  {
    "objectID": "reference/index.html#ui-layout",
    "href": "reference/index.html#ui-layout",
    "title": "Shiny",
    "section": "UI Layout",
    "text": "UI Layout\nControl the layout of multiple UI components.\n\n\n\nui.layout_sidebar\nLayout a sidebar and main area\n\n\nui.panel_sidebar\nCreate a sidebar panel\n\n\nui.panel_main\nCreate an main area panel\n\n\nui.column\nResponsive row-column based layout\n\n\nui.row\nResponsive row-column based layout"
  },
  {
    "objectID": "reference/index.html#ui-inputs",
    "href": "reference/index.html#ui-inputs",
    "title": "Shiny",
    "section": "UI Inputs",
    "text": "UI Inputs\nCreate UI that prompts the user for input values or interaction.\n\n\n\nui.input_select\nCreate a select list that can be used to choose a single or multiple items from a\n\n\nui.input_selectize\nCreate a select list that can be used to choose a single or multiple items from a\n\n\nui.input_slider\nConstructs a slider widget to select a number, date, or date-time from a range.\n\n\nui.input_date\nCreates a text input which, when clicked on, brings up a calendar that the user can\n\n\nui.input_date_range\nCreates a pair of text inputs which, when clicked on, bring up calendars that the\n\n\nui.input_checkbox\nCreate a checkbox that can be used to specify logical values.\n\n\nui.input_checkbox_group\nCreate a group of checkboxes that can be used to toggle multiple choices\n\n\nui.input_switch\nCreate a switch that can be used to specify logical values. Similar to\n\n\nui.input_radio_buttons\nCreate a set of radio buttons used to select an item from a list.\n\n\nui.input_numeric\nCreate an input control for entry of numeric values.\n\n\nui.input_text\nCreate an input control for entry of text values\n\n\nui.input_text_area\nCreate a textarea input control for entry of unstructured text values.\n\n\nui.input_password\nCreate an password control for entry of passwords.\n\n\nui.input_action_button\nCreates an action button whose value is initially zero, and increments by one each\n\n\nui.input_action_link\nCreates a link whose value is initially zero, and increments by one each time it is"
  },
  {
    "objectID": "reference/index.html#update-inputs",
    "href": "reference/index.html#update-inputs",
    "title": "Shiny",
    "section": "Update inputs",
    "text": "Update inputs\nProgrammatically update input values.\n\n\n\nui.update_select\nChange the value of a select input on the client.\n\n\nui.update_selectize\nChange the value of a selectize.js powered input on the client.\n\n\nui.update_slider\nChange the value of a slider input on the client.\n\n\nui.update_date\nChange the value of a date input on the client.\n\n\nui.update_date_range\nChange the start and end values of a date range input on the client.\n\n\nui.update_checkbox\nChange the value of a checkbox input on the client.\n\n\nui.update_checkbox_group\nChange the value of a checkbox group input on the client.\n\n\nui.update_switch\nChange the value of a switch input on the client.\n\n\nui.update_radio_buttons\nChange the value of a radio input on the client.\n\n\nui.update_numeric\nChange the value of a number input on the client.\n\n\nui.update_text\nChange the value of a text input on the client.\n\n\nui.update_navs\nChange the value of a navs container on the client."
  },
  {
    "objectID": "reference/index.html#navigation-tab-panels",
    "href": "reference/index.html#navigation-tab-panels",
    "title": "Shiny",
    "section": "Navigation (tab) panels",
    "text": "Navigation (tab) panels\nCreate segments of UI content.\n\n\n\nui.nav\nCreate a nav item pointing to some internal content.\n\n\nui.nav_control\nPlace a control in the navigation container.\n\n\nui.nav_spacer\nCreate space between nav items.\n\n\nui.nav_menu\nCreate a menu of nav items.\n\n\nui.navset_tab\nRender nav items as a tabset.\n\n\nui.navset_tab_card\nRender nav items as a tabset inside a card container.\n\n\nui.navset_pill\nRender nav items as a pillset.\n\n\nui.navset_pill_card\nRender nav items as a pillset inside a card container.\n\n\nui.navset_pill_list\nRender nav items as a vertical pillset."
  },
  {
    "objectID": "reference/index.html#ui-panels",
    "href": "reference/index.html#ui-panels",
    "title": "Shiny",
    "section": "UI panels",
    "text": "UI panels\nVisually group together a section of UI components.\n\n\n\nui.panel_absolute\nCreate a panel of absolutely positioned content.\n\n\nui.panel_fixed\nCreate a panel of absolutely positioned content.\n\n\nui.panel_conditional\nCreate a conditional panel\n\n\nui.panel_title\nCreate title(s) for the application.\n\n\nui.panel_well\nCreate a well panel"
  },
  {
    "objectID": "reference/index.html#uploads-downloads",
    "href": "reference/index.html#uploads-downloads",
    "title": "Shiny",
    "section": "Uploads & downloads",
    "text": "Uploads & downloads\nAllow users to upload and download files.\n\n\n\nui.input_file\nCreate a file upload control that can be used to upload one or more files.\n\n\nui.download_button\nCreate a download button"
  },
  {
    "objectID": "reference/index.html#custom-ui",
    "href": "reference/index.html#custom-ui",
    "title": "Shiny",
    "section": "Custom UI",
    "text": "Custom UI\nLower-level UI functions for creating custom HTML/CSS/JS\n\n\n\nui.HTML\nMark a string as raw HTML. This will prevent the string from being escaped when\n\n\nui.TagList\nCreate an HTML tag list (i.e., a fragment of HTML)\n\n\nui.markdown\nConvert a string of markdown to :func:ui.HTML.\n\n\nui.insert_ui\nInsert UI objects\n\n\nui.remove_ui\nRemove UI objects"
  },
  {
    "objectID": "reference/index.html#rendering-outputs",
    "href": "reference/index.html#rendering-outputs",
    "title": "Shiny",
    "section": "Rendering outputs",
    "text": "Rendering outputs\nUI (output_*()) and server (render)ing functions for generating content server-side.\n\n\n\nui.output_plot\nCreate a output container for a static plot.\n\n\nrender.plot\nReactively render a plot object as an HTML image.\n\n\nui.output_image\nCreate a output container for a static image.\n\n\nrender.image\nReactively render a image file as an HTML image.\n\n\nui.output_table\nCreate a output container for a table.\n\n\nrender.table\nReactively render a Pandas data frame object (or similar) as a basic HTML table.\n\n\nui.output_text\nCreate a output container for some text.\n\n\nui.output_text_verbatim\nCreate a output container for some text.\n\n\nrender.text\nReactively render text.\n\n\nui.output_ui\nCreate a output container for a UI (i.e., HTML) element.\n\n\nrender.ui\nReactively render HTML content."
  },
  {
    "objectID": "reference/index.html#reactive-programming",
    "href": "reference/index.html#reactive-programming",
    "title": "Shiny",
    "section": "Reactive programming",
    "text": "Reactive programming\n\n\n\nreactive.Calc\nMark a function as a reactive calculation.\n\n\nreactive.Effect\nMark a function as a reactive side effect.\n\n\nreactive.Value\nCreate a reactive value\n\n\nreactive.isolate\nCreate a non-reactive scope within a reactive scope.\n\n\nreactive.invalidate_later\nScheduled Invalidation\n\n\nreactive.flush\nRun any pending invalidations (i.e., flush the reactive environment).\n\n\nreactive.poll\nCreate a reactive polling object.\n\n\nreactive.file_reader\nCreate a reactive file reader."
  },
  {
    "objectID": "reference/index.html#create-and-run-applications",
    "href": "reference/index.html#create-and-run-applications",
    "title": "Shiny",
    "section": "Create and run applications",
    "text": "Create and run applications\n\n\n\nrun_app\nStarts a Shiny app. Press Ctrl+C (or Ctrl+Break on Windows) to stop.\n\n\nApp\nCreate a Shiny app instance.\n\n\nInputs\nA class representing Shiny input values.\n\n\nOutputs\nA class representing Shiny output definitions.\n\n\nSession\nA class representing a user session."
  },
  {
    "objectID": "reference/index.html#display-messages",
    "href": "reference/index.html#display-messages",
    "title": "Shiny",
    "section": "Display messages",
    "text": "Display messages\n\n\n\nui.help_text\nCreate a help text element\n\n\nui.notification_show\nShow a notification to the user.\n\n\nui.notification_remove\nRemove a notification.\n\n\nui.modal\nCreates the UI for a modal dialog, using Bootstrap’s modal class. Modals are\n\n\nui.modal_show\nShow a modal dialog.\n\n\nui.modal_remove\nRemove a modal dialog.\n\n\nui.modal_button\nCreates a button that will dismiss a :func:modal (useful when customising the\n\n\nui.Progress\nInitialize a progress bar."
  },
  {
    "objectID": "reference/index.html#error-validation",
    "href": "reference/index.html#error-validation",
    "title": "Shiny",
    "section": "Error validation",
    "text": "Error validation\n\n\n\ntypes.SilentException\nThrow a silent exception.\n\n\ntypes.SilentCancelOutputException\nThrow a silent exception and don’t clear output\n\n\ntypes.SafeException\nThrow a safe exception."
  },
  {
    "objectID": "reference/index.html#modules",
    "href": "reference/index.html#modules",
    "title": "Shiny",
    "section": "Modules",
    "text": "Modules\n\n\n\nmodule.ui\n\n\n\nmodule.server"
  },
  {
    "objectID": "reference/index.html#type-hints",
    "href": "reference/index.html#type-hints",
    "title": "Shiny",
    "section": "Type hints",
    "text": "Type hints\n\n\n\ntypes.FileInfo\nInformation about a file upload.\n\n\ntypes.ImgData\nReturn type for :func:~shiny.render.image."
  },
  {
    "objectID": "reference/index.html#developer-facing-tools",
    "href": "reference/index.html#developer-facing-tools",
    "title": "Shiny",
    "section": "Developer facing tools",
    "text": "Developer facing tools\n\n\n\nsession.get_current_session\nGet the current user session.\n\n\nsession.require_active_session\nRaise an exception if no Shiny session is currently active.\n\n\nsession.session_context\nContext manager for current session.\n\n\nreactive.get_current_context\nGet the current reactive context."
  },
  {
    "objectID": "reference/render.ui.html",
    "href": "reference/render.ui.html",
    "title": "Shiny",
    "section": "",
    "text": "render.ui(fn=None)\nReactively render HTML content.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA decorator for a function that returns an object of type"
  },
  {
    "objectID": "reference/render.ui.html#tip",
    "href": "reference/render.ui.html#tip",
    "title": "Shiny",
    "section": "Tip",
    "text": "Tip\nThis decorator should be applied before the @output decorator. Also, the name of the decorated function (or @output(id=...)) should match the id of a :func:~shiny.ui.output_ui container (see :func:~shiny.ui.output_ui for example usage)."
  },
  {
    "objectID": "reference/render.ui.html#see-also",
    "href": "reference/render.ui.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.output_ui"
  },
  {
    "objectID": "reference/reactive.get_current_context.html",
    "href": "reference/reactive.get_current_context.html",
    "title": "Shiny",
    "section": "",
    "text": "reactive.get_current_context()\nGet the current reactive context.\n\n\n\n\n\nType\nDescription\n\n\n\n\nclass\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nRuntimeError\nIf called outside of a reactive context."
  },
  {
    "objectID": "reference/ui.input_select.html",
    "href": "reference/ui.input_select.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_select(id, label, choices, selected=None, multiple=False, selectize=False, width=None, size=None)\nCreate a select list that can be used to choose a single or multiple items from a list of values.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nchoices\nshiny.ui._input_select.SelectChoicesArg\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\nrequired\n\n\nselected\nOptional[str | list[str]]\nThe values that should be initially selected, if any.\nNone\n\n\nmultiple\nbool\nIs selection of multiple items allowed?\nFalse\n\n\nselectize\nbool\nWhether to use selectize.js or not.\nFalse\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\nsize\nOptional[str]\nNumber of items to show in the selection box; a larger number will result in a taller box. Normally, when multiple=False, a select input will be a drop-down list, but when size is set, it will be a box instead.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\n.. admonition:: Server value\nA list of strings, usually of length 1, with the value of the selected items. When\n``multiple=True`` and nothing is selected, this value will be ``None``."
  },
  {
    "objectID": "reference/ui.input_select.html#see-also",
    "href": "reference/ui.input_select.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_selectize ~shiny.ui.update_select ~shiny.ui.input_radio_buttons ~shiny.ui.input_checkbox_group"
  },
  {
    "objectID": "reference/ui.input_select.html#examples",
    "href": "reference/ui.input_select.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_select(\n        \"state\",\n        \"Choose a state:\",\n        {\n            \"East Coast\": {\"NY\": \"New York\", \"NJ\": \"New Jersey\", \"CT\": \"Connecticut\"},\n            \"West Coast\": {\"WA\": \"Washington\", \"OR\": \"Oregon\", \"CA\": \"California\"},\n            \"Midwest\": {\"MN\": \"Minnesota\", \"WI\": \"Wisconsin\", \"IA\": \"Iowa\"},\n        },\n    ),\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def value():\n        return \"You choose: \" + str(input.state())\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/reactive.Effect.html",
    "href": "reference/reactive.Effect.html",
    "title": "Shiny",
    "section": "",
    "text": "reactive.Effect(fn=None, suspended=False, priority=0, session=MISSING)\nMark a function as a reactive side effect.\nA reactive effect is like a reactive calculation (:func:Calc) in that it can read reactive values and call reactive calculations, and will automatically re-execute when those dependencies change. But unlike reactive calculations, it doesn’t return a result and can’t be used as an input to other reactive expressions. Thus, observers are only useful for their side effects (for example, performing I/O).\nAnother contrast between reactive calculations and effects is their execution strategy. Reactive calculations use lazy evaluation; that is, when their dependencies change, they don’t re-execute right away but rather wait until they are called by someone else. Indeed, if they are not called then they will never re-execute. In contrast, effects use eager evaluation; as soon as their dependencies change, they schedule themselves to re-execute.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsuspended\nbool\nIf TRUE, start the effect in a suspended state (i.e., it will not execute until resumed and invalidated).\nFalse\n\n\npriority\nint\nThe new priority. A higher value means higher priority: an effect with a higher priority value will execute before all effects with lower priority values. Positive, negative, and zero values are allowed.\n0\n\n\nsession\nMISSING_TYPE | Session | None\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nMISSING\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA decorator that marks a function as a reactive effect (\n\n\n\n\n\n\n\n~shiny.Inputs ~shiny.reactive.Value ~shiny.reactive.Effect ~shiny.reactive.invalidate_later ~shiny.event"
  },
  {
    "objectID": "reference/reactive.Effect.html#examples",
    "href": "reference/reactive.Effect.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(ui.input_action_button(\"btn\", \"Press me!\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    @reactive.event(input.btn)\n    def _():\n        ui.insert_ui(\n            ui.p(\"Number of clicks: \", input.btn()), selector=\"#btn\", where=\"afterEnd\"\n        )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.panel_fixed.html",
    "href": "reference/ui.panel_fixed.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.panel_fixed(args, kwargs)\nCreate a panel of absolutely positioned content.\nThis function is equivalent to calling :func:~shiny.ui.panel_absolute with fixed=True (i.e., the panel does not scroll with the rest of the page). See :func:~shiny.ui.panel_absolute for more information.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nTagChild | TagAttrs\nUI elements to include inside the panel.\n()\n\n\nkwargs\nhtmltools.TagAttrValue\nArguments passed along to :func:~shiny.ui.panel_absolute.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\npanel_absolute"
  },
  {
    "objectID": "reference/ui.Progress.html",
    "href": "reference/ui.Progress.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.Progress(self, min=0, max=1, session=None)\nInitialize a progress bar.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmin\nint\nThe value that represents the starting point of the progress bar. Must be less than max.\n0\n\n\nmax\nint\nThe value that represents the end of the progress bar. Must be greater than min.\n1\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.Progress.html#examples",
    "href": "reference/ui.Progress.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport asyncio\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_text(\"compute\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n                # Normally use time.sleep() instead, but it doesn't yet work in Pyodide.\n                # https://github.com/pyodide/pyodide/issues/2354\n\n        return \"Done computing!\"\n\n\napp = App(app_ui, server)\n\n\nMethods\n\n\n\nName\nDescription\n\n\n\n\nclose\nClose the progress bar. You can also use the Progress object as a context\n\n\ninc\nIncrement the progress bar.\n\n\nset\nUpdates the progress panel. When called the first time, the progress panel is\n\n\n\n\n\nclose\nui.Progress.close(self)\nClose the progress bar. You can also use the Progress object as a context manager, which will cause the progress bar to close on exit.\n\nParameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nself\n\nThe object instance\nrequired"
  },
  {
    "objectID": "reference/ui.Progress.html#note",
    "href": "reference/ui.Progress.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nRemoves the progress panel. Future calls to set and close will be ignored."
  },
  {
    "objectID": "reference/ui.Progress.html#examples-1",
    "href": "reference/ui.Progress.html#examples-1",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom datetime import datetime\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"close\", \"Close the session\"),\n    ui.p(\n        \"\"\"If this example is running on the browser (i.e., via shinylive),\n        closing the session will log a message to the JavaScript console\n        (open the browser's developer tools to see it).\n        \"\"\"\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n    session.on_ended(log)\n\n    @reactive.Effect\n    @reactive.event(input.close)\n    async def _():\n        await session.close()\n\n\napp = App(app_ui, server)\n\n\ninc\nui.Progress.inc(self, amount=0.1, message=None, detail=None)\nIncrement the progress bar.\nLike set, this updates the progress panel. The difference is that inc increases the progress bar by amount, instead of setting it to a specific value.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nself\n\nThe object instance\nrequired\n\n\namount\nfloat\nThe amount to increment in progress.\n0.1\n\n\nmessage\nOptional[str]\nThe message to be displayed to the user or None to hide the current message (if any).\nNone\n\n\ndetail\nOptional[str]\nThe detail message to be displayed to the user or None to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.\nNone\n\n\n\n\n\n\nset\nui.Progress.set(self, value=None, message=None, detail=None)\nUpdates the progress panel. When called the first time, the progress panel is displayed.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nself\n\nThe object instance\nrequired\n\n\nvalue\nOptional[float]\nThe value at which to set the progress bar, relative to min and max. None hides the progress bar, if it is currently visible.\nNone\n\n\nmessage\nOptional[str]\nThe message to be displayed to the user or None to hide the current message (if any).\nNone\n\n\ndetail\nOptional[str]\nThe detail message to be displayed to the user or None to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.\nNone"
  },
  {
    "objectID": "reference/ui.panel_main.html",
    "href": "reference/ui.panel_main.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.panel_main(args, width=8, kwargs)\nCreate an main area panel\nSee :func:~shiny.ui.layout_sidebar for more information and an example.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nTagChild | TagAttrs\nUI elements to include inside the main area.\n()\n\n\nwidth\nint\nThe width of the main area (an integer between 1 and 12).\n8\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to place on the main area tag.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\npanel_sidebar layout_sidebar"
  },
  {
    "objectID": "reference/ui.row.html",
    "href": "reference/ui.row.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.row(args, kwargs)\nResponsive row-column based layout\nLayout UI components using Bootstrap’s grid layout system. Use row() to group elements that should appear on the same line (if the browser has adequate width) and :func:~shiny.ui.column to define how much horizontal space within a 12-unit wide grid each on of these elements should occupy. See the layout guide <https://shiny.rstudio.com/articles/layout-guide.html>_ for more context and examples.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nTagChild | TagAttrs\nAny number of child elements.\n()\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to place on the row tag.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\ncolumn"
  },
  {
    "objectID": "reference/ui.row.html#examples",
    "href": "reference/ui.row.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(4, ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)),\n        ui.column(8, ui.output_plot(\"plot\")),\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.update_checkbox.html",
    "href": "reference/ui.update_checkbox.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_checkbox(id, label=None, value=None, session=None)\nChange the value of a checkbox input on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nOptional[str]\nAn input label.\nNone\n\n\nvalue\nOptional[bool]\nA new value.\nNone\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nNone"
  },
  {
    "objectID": "reference/ui.update_checkbox.html#note",
    "href": "reference/ui.update_checkbox.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_checkbox.html#see-also",
    "href": "reference/ui.update_checkbox.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_checkbox"
  },
  {
    "objectID": "reference/ui.update_checkbox.html#examples",
    "href": "reference/ui.update_checkbox.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"controller\", \"Controller\", min=0, max=1, value=0, step=1),\n    ui.input_checkbox(\"inCheckbox\", \"Input checkbox\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        # True if controller is odd, False if even.\n        x_even = input.controller() % 2 == 1\n        ui.update_checkbox(\"inCheckbox\", value=x_even)\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/types.FileInfo.html",
    "href": "reference/types.FileInfo.html",
    "title": "Shiny",
    "section": "",
    "text": "types.FileInfo()\nInformation about a file upload."
  },
  {
    "objectID": "reference/types.FileInfo.html#see-also",
    "href": "reference/types.FileInfo.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_file"
  },
  {
    "objectID": "reference/types.FileInfo.html#example",
    "href": "reference/types.FileInfo.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee :func:~shiny.ui.input_file."
  },
  {
    "objectID": "reference/ui.nav_menu.html",
    "href": "reference/ui.nav_menu.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.nav_menu(title, args, value=None, icon=None, align='left')\nCreate a menu of nav items.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntitle\nhtmltools.TagChild\nA title to display. Can be a character string or UI elements (i.e., tags).\nrequired\n\n\n*args\nNav | str\nA collection of nav items (e.g., :func:~shiny.ui.nav) and/or strings. Strings will be rendered as a section header unless the string is a set of two or more hyphens (e.g., ---), in which case it will be rendered as a divider.\n()\n\n\nvalue\nOptional[str]\nThe value of the item. This is used to determine whether the item is active (when an id is provided to the nav container), programmatically select the item (e.g., :func:~shiny.ui.update_navs), and/or be provided to the selected argument of the navigation container (e.g., :func:~shiny.ui.navset_tab).\nNone\n\n\nicon\nhtmltools.TagChild\nAn icon to appear inline with the button/link.\nNone\n\n\nalign\nLiteral[left, right]\nHorizontal alignment of the dropdown menu relative to dropdown toggle.\n'left'\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element representing both the navigation menu.\n\n\n\n\n\n\n\n~shiny.ui.nav ~shiny.ui.nav_control ~shiny.ui.nav_spacer ~shiny.ui.navset_bar ~shiny.ui.navset_tab ~shiny.ui.navset_pill ~shiny.ui.navset_tab_card ~shiny.ui.navset_pill_card ~shiny.ui.navset_hidden Example ——- See nav"
  },
  {
    "objectID": "reference/ui.input_password.html",
    "href": "reference/ui.input_password.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_password(id, label, value='', width=None, placeholder=None)\nCreate an password control for entry of passwords.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nvalue\nstr\nInitial value.\n''\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\nplaceholder\nOptional[str]\nThe placeholder of the input.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\n.. admonition:: Server value\nA string of the password input. The default value is unless value is provided."
  },
  {
    "objectID": "reference/ui.input_password.html#see-also",
    "href": "reference/ui.input_password.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.update_text"
  },
  {
    "objectID": "reference/ui.input_password.html#examples",
    "href": "reference/ui.input_password.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_password(\"password\", \"Password:\"),\n    ui.input_action_button(\"go\", \"Go\"),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    @reactive.event(input.go)\n    def value():\n        return input.password()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.modal_button.html",
    "href": "reference/ui.modal_button.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.modal_button(label, icon=None, kwargs)\nCreates a button that will dismiss a :func:modal (useful when customising the footer of :func:modal).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nicon\nhtmltools.TagChild\nAn icon to appear inline with the button/link.\nNone\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to be applied to the button.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n~shiny.ui.modal ~shiny.ui.modal_show ~shiny.ui.modal_remove"
  },
  {
    "objectID": "reference/ui.modal_button.html#example",
    "href": "reference/ui.modal_button.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee ."
  },
  {
    "objectID": "reference/ui.update_radio_buttons.html",
    "href": "reference/ui.update_radio_buttons.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.update_radio_buttons(id, label=None, choices=None, selected=None, inline=False, session=None)\nChange the value of a radio input on the client.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nOptional[str]\nAn input label.\nNone\n\n\nchoices\nOptional[ChoicesArg]\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\nNone\n\n\nselected\nOptional[str]\nThe values that should be initially selected, if any.\nNone\n\n\ninline\nbool\nIf `True```, the result is displayed inline                                                                                                                                                                 |False| |session| Optional[Session]    | A :class:shiny.Sessioninstance. If not provided, it is inferred via :func:shiny.session.get_current_session.                                                                                          |None`"
  },
  {
    "objectID": "reference/ui.update_radio_buttons.html#note",
    "href": "reference/ui.update_radio_buttons.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\n{note}"
  },
  {
    "objectID": "reference/ui.update_radio_buttons.html#see-also",
    "href": "reference/ui.update_radio_buttons.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_radio_buttons"
  },
  {
    "objectID": "reference/ui.update_radio_buttons.html#examples",
    "href": "reference/ui.update_radio_buttons.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.tags.p(\"The first radio button group controls the second\"),\n    ui.input_radio_buttons(\n        \"inRadioButtons\", \"Input radio buttons\", [\"Item A\", \"Item B\", \"Item C\"]\n    ),\n    ui.input_radio_buttons(\n        \"inRadioButtons2\", \"Input radio buttons 2\", [\"Item A\", \"Item B\", \"Item C\"]\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        x = input.inRadioButtons()\n\n        # Can also set the label and select items\n        ui.update_radio_buttons(\n            \"inRadioButtons2\",\n            label=\"Radio buttons label \" + x,\n            choices=[x],\n            selected=x,\n        )\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.output_text_verbatim.html",
    "href": "reference/ui.output_text_verbatim.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.output_text_verbatim(id, placeholder=False)\nCreate a output container for some text.\nPlace a :func:~shiny.render.text result in the user interface. Differs from :func:~shiny.ui.output_text in that it wraps the text in a fixed-width container with a gray-ish background color and border.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nplaceholder\nbool\nIf the output is empty or None, should an empty rectangle be displayed to serve as a placeholder? (does not affect behavior when the output is nonempty)\nFalse\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element\n\n\n\n\n\n\n\n~shiny.render.text ~shiny.ui.output_text"
  },
  {
    "objectID": "reference/ui.output_text_verbatim.html#example",
    "href": "reference/ui.output_text_verbatim.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee output_text"
  },
  {
    "objectID": "reference/Session.html",
    "href": "reference/Session.html",
    "title": "Shiny",
    "section": "",
    "text": "session.Session(self, app, id, conn, debug=False)\nA class representing a user session.\n\n\n\n\n\nName\nDescription\n\n\n\n\nclose\nClose the session.\n\n\ndownload\nDecorator to register a function to handle a download.\n\n\ndynamic_route\nRegister a function to call when a dynamically generated, session-specific,\n\n\nmake_scope\n\n\n\non_ended\nRegisters a function to be called after the client has disconnected.\n\n\non_flush\nRegister a function to call before the next reactive flush.\n\n\non_flushed\nRegister a function to call after the next reactive flush.\n\n\nroot_scope\n\n\n\nsend_custom_message\nSend a message to the client.\n\n\nsend_input_message\nSend an input message to the session.\n\n\n\n\n\n\nSession.close(self, code=1001)\nClose the session."
  },
  {
    "objectID": "reference/Session.html#examples",
    "href": "reference/Session.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom datetime import datetime\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"close\", \"Close the session\"),\n    ui.p(\n        \"\"\"If this example is running on the browser (i.e., via shinylive),\n        closing the session will log a message to the JavaScript console\n        (open the browser's developer tools to see it).\n        \"\"\"\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n    session.on_ended(log)\n\n    @reactive.Effect\n    @reactive.event(input.close)\n    async def _():\n        await session.close()\n\n\napp = App(app_ui, server)\n\n\ndownload\nSession.download(self, id=None, filename=None, media_type=None, encoding='utf-8')\nDecorator to register a function to handle a download.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nOptional[str]\nThe name of the download.\nNone\n\n\nfilename\nOptional[str | Callable[[], str]]\nThe filename of the download.\nNone\n\n\nmedia_type\nNone | str | Callable[[], str]\nThe media type of the download.\nNone\n\n\nencoding\nstr\nThe encoding of the download.\n'utf-8'\n\n\n\n\n\nReturns\n\n\n\nType\nDescription\n\n\n\n\nThe decorated function."
  },
  {
    "objectID": "reference/Session.html#examples-1",
    "href": "reference/Session.html#examples-1",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport asyncio\nimport io\nimport os\nfrom datetime import date\nfrom typing import Any\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import *\nfrom shiny.ui import div, p\n\n\ndef make_example(id: str, label: str, title: str, desc: str, extra: Any = None):\n    return ui.column(\n        4,\n        div(\n            {\"class\": \"card mb-4\"},\n            div(title, class_=\"card-header\"),\n            div(\n                {\"class\": \"card-body\"},\n                p(desc, class_=\"card-text text-muted\"),\n                extra,\n                ui.download_button(id, label, class_=\"btn-primary\"),\n            ),\n        ),\n    )\n\n\napp_ui = ui.page_fluid(\n    ui.row(\n        make_example(\n            \"download1\",\n            label=\"Download CSV\",\n            title=\"Simple case\",\n            desc=\"Downloads a pre-existing file, using its existing name on disk.\",\n        ),\n    ),\n    ui.row(\n        make_example(\n            \"download2\",\n            label=\"Download plot\",\n            title=\"Dynamic data generation\",\n            desc=\"Downloads a PNG that's generated on the fly.\",\n            extra=[\n                ui.input_text(\"title\", \"Plot title\", \"Random scatter plot\"),\n                ui.input_slider(\n                    \"num_points\", \"Number of data points\", min=1, max=100, value=50\n                ),\n            ],\n        ),\n    ),\n    ui.row(\n        make_example(\n            \"download3\",\n            \"Download\",\n            \"Dynamic filename\",\n            \"Demonstrates that filenames can be generated on the fly (and use Unicode characters!).\",\n        ),\n    ),\n    ui.row(\n        make_example(\n            \"download4\",\n            \"Download\",\n            \"Failed downloads\",\n            \"Throws an error in the download handler, download should not succeed.\",\n        ),\n    ),\n    ui.row(\n        make_example(\n            \"download5\",\n            \"Download\",\n            \"Undefined download\",\n            \"This button doesn't have corresponding server code registered to it, download should result in 404 error\",\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @session.download()\n    def download1():\n        \"\"\"\n        This is the simplest case. The implementation simply returns the name of a file.\n        Note that the function name (`download1`) determines which download_button()\n        corresponds to this function.\n        \"\"\"\n\n        path = os.path.join(os.path.dirname(__file__), \"mtcars.csv\")\n        return path\n\n    @session.download(filename=\"image.png\")\n    def download2():\n        \"\"\"\n        Another way to implement a file download is by yielding bytes; either all at\n        once, like in this case, or by yielding multiple times. When using this\n        approach, you should pass a filename argument to @session.download, which\n        determines what the browser will name the downloaded file.\n        \"\"\"\n\n        print(input.num_points())\n        x = np.random.uniform(size=input.num_points())\n        y = np.random.uniform(size=input.num_points())\n        plt.figure()\n        plt.scatter(x, y)\n        plt.title(input.title())\n        with io.BytesIO() as buf:\n            plt.savefig(buf, format=\"png\")\n            yield buf.getvalue()\n\n    @session.download(\n        filename=lambda: f\"新型-{date.today().isoformat()}-{np.random.randint(100,999)}.csv\"\n    )\n    async def download3():\n        await asyncio.sleep(0.25)\n        yield \"one,two,three\\n\"\n        yield \"新,1,2\\n\"\n        yield \"型,4,5\\n\"\n\n    @session.download(id=\"download4\", filename=\"failuretest.txt\")\n    async def _():\n        yield \"hello\"\n        raise Exception(\"This error was caused intentionally\")\n\n\napp = App(app_ui, server)\n\n\ndynamic_route\nSession.dynamic_route(self, name, handler)\nRegister a function to call when a dynamically generated, session-specific, route is requested.\nProvides a convenient way to serve-up session-dependent values for other clients/applications to consume.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nA name for the route (used to determine part of the URL path).\nrequired\n\n\nhandler\nshiny.session._session.DynamicRouteHandler\nThe function to call when a request is made to the route. This function should take a single argument (a :class:starlette.requests.Request object) and return a :class:starlette.types.ASGIApp object.\nrequired\n\n\n\n\n\nReturns\n\n\n\nType\nDescription\n\n\n\n\nThe URL path for the route."
  },
  {
    "objectID": "reference/Session.html#examples-2",
    "href": "reference/Session.html#examples-2",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"serve\", \"Click to serve\"), ui.div(id=\"messages\")\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    @reactive.event(input.serve)\n    def _():\n        async def my_handler(request: Request) -> JSONResponse:\n            return JSONResponse({\"n_clicks\": input.serve()}, status_code=200)\n\n        path = session.dynamic_route(\"my_handler\", my_handler)\n\n        print(\"Serving at: \", path)\n\n        ui.insert_ui(\n            ui.tags.script(\n                f\"\"\"\n                fetch('{path}')\n                  .then(r => r.json())\n                  .then(x => {{ $('#messages').text(`Clicked ${{x.n_clicks}} times`); }});\n                \"\"\"\n            ),\n            selector=\"body\",\n        )\n\n\napp = App(app_ui, server)\n\n\nmake_scope\nSession.make_scope(self, id)\n\n\non_ended\nSession.on_ended(self, fn)\nRegisters a function to be called after the client has disconnected.\n\nParameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfn\nCallable[[], None]\nThe function to call.\nrequired\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA function that can be used to cancel the registration."
  },
  {
    "objectID": "reference/Session.html#examples-3",
    "href": "reference/Session.html#examples-3",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom datetime import datetime\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"close\", \"Close the session\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n    session.on_ended(log)\n\n    @reactive.Effect\n    @reactive.event(input.close)\n    async def _():\n        await session.close()\n\n\napp = App(app_ui, server)\n\n\non_flush\nSession.on_flush(self, fn, once=True)\nRegister a function to call before the next reactive flush.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfn\nCallable[[], None]\nThe function to call.\nrequired\n\n\nonce\nbool\nWhether to call the function only once or on every flush.\nTrue\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA function that can be used to cancel the registration."
  },
  {
    "objectID": "reference/Session.html#examples-4",
    "href": "reference/Session.html#examples-4",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom datetime import datetime\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"flush\", \"Trigger flush\"),\n    ui.output_ui(\"n_clicks\"),\n    ui.div(id=\"flush_time\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n        print(msg)\n        ui.insert_ui(\n            ui.p(msg),\n            selector=\"#flush_time\",\n        )\n\n    session.on_flush(log, once=False)\n\n    @output\n    @render.ui\n    def n_clicks():\n        return \"Number of clicks: \" + str(input.flush())\n\n\napp = App(app_ui, server)\n\n\non_flushed\nSession.on_flushed(self, fn, once=True)\nRegister a function to call after the next reactive flush.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfn\nCallable[[], None]\nThe function to call.\nrequired\n\n\nonce\nbool\nWhether to call the function only once or on every flush.\nTrue\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA function that can be used to cancel the registration."
  },
  {
    "objectID": "reference/Session.html#examples-5",
    "href": "reference/Session.html#examples-5",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom datetime import datetime\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"flush\", \"Trigger flush\"),\n    ui.output_ui(\"n_clicks\"),\n    ui.div(id=\"flush_time\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n        print(msg)\n        ui.insert_ui(\n            ui.p(msg),\n            selector=\"#flush_time\",\n        )\n\n    session.on_flushed(log, once=False)\n\n    @output\n    @render.ui\n    def n_clicks():\n        return \"Number of clicks: \" + str(input.flush())\n\n\napp = App(app_ui, server)\n\n\nroot_scope\nSession.root_scope(self)\n\n\nsend_custom_message\nSession.send_custom_message(self, type, message)\nSend a message to the client.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntype\nstr\nThe type of message to send.\nrequired\n\n\nmessage\ndict[str, object]\nThe message to send.\nrequired"
  },
  {
    "objectID": "reference/Session.html#note",
    "href": "reference/Session.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nSends messages to the client which can be handled in JavaScript with Shiny.addCustomMessageHandler(type, function(message){...}). Once the message handler is added, it will be invoked each time send_custom_message() is called on the server."
  },
  {
    "objectID": "reference/Session.html#examples-6",
    "href": "reference/Session.html#examples-6",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"msg\", \"Enter a message\"),\n    ui.input_action_button(\"submit\", \"Submit the message\"),\n    # It'd be better to use ui.insert_ui() in order to implement this kind of\n    # functionality...this is just a basic demo of how custom message handling works.\n    ui.tags.div(id=\"messages\"),\n    ui.tags.script(\n        \"\"\"\n        $(function() {\n            Shiny.addCustomMessageHandler(\"append_msg\", function(message) {\n                $(\"<p>\").text(message.msg).appendTo(\"#messages\");\n            });\n        });\n        \"\"\"\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    @reactive.event(input.submit)\n    async def _():\n        await session.send_custom_message(\"append_msg\", {\"msg\": input.msg()})\n\n\napp = App(app_ui, server, debug=True)\n\n\nsend_input_message\nSession.send_input_message(self, id, message)\nSend an input message to the session.\nSends a message to an input on the session’s client web page; if the input is present and bound on the page at the time the message is received, then the input binding object’s receiveMessage(el, message) method will be called. This method should generally not be called directly from Shiny apps, but through friendlier wrapper functions like ui.update_text().\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn id matching the id of an input to update.\nrequired\n\n\nmessage\ndict[str, object]\nThe message to send.\nrequired"
  },
  {
    "objectID": "reference/module.ui.html",
    "href": "reference/module.ui.html",
    "title": "Shiny",
    "section": "",
    "text": "module.ui(fn)"
  },
  {
    "objectID": "reference/reactive.invalidate_later.html",
    "href": "reference/reactive.invalidate_later.html",
    "title": "Shiny",
    "section": "",
    "text": "reactive.invalidate_later(delay, session=MISSING)\nScheduled Invalidation\nSchedules the current reactive context to be invalidated in the given number of seconds.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndelay\nfloat\nThe number of seconds to wait before invalidating.\nrequired"
  },
  {
    "objectID": "reference/reactive.invalidate_later.html#note",
    "href": "reference/reactive.invalidate_later.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nWhen called within a reactive function (i.e., :func:Effect, :func:Calc, :func:render.ui, etc.), that reactive context is invalidated (and re-executes) after the interval has passed. The re-execution will reset the invalidation flag, so in a typical use case, the object will keep re-executing and waiting for the specified interval. It’s possible to stop this cycle by adding conditional logic that prevents the invalidate_later from being run."
  },
  {
    "objectID": "reference/reactive.invalidate_later.html#examples",
    "href": "reference/reactive.invalidate_later.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nimport random\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(ui.output_ui(\"value\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        reactive.invalidate_later(0.5)\n        print(\"Random int: \", random.randint(0, 10000))\n\n    @output\n    @render.ui\n    def value():\n        reactive.invalidate_later(0.5)\n        return \"Random int: \" + str(random.randint(0, 10000))\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/ui.navset_tab.html",
    "href": "reference/ui.navset_tab.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.navset_tab(args, id=None, selected=None, header=None, footer=None)\nRender nav items as a tabset.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*args\nshiny.types.NavSetArg\nA collection of nav items (e.g., :func:shiny.ui.nav).\n()\n\n\nid\nOptional[str]\nIf provided, will create an input value that holds the currently selected nav item.\nNone\n\n\nselected\nOptional[str]\nChoose a particular nav item to select by default value (should match it’s value).\nNone\n\n\nheader\nhtmltools.TagChild\nUI to display above the selected content.\nNone\n\n\nfooter\nhtmltools.TagChild\nUI to display below the selected content.\nNone\n\n\n\n\n\n\n~shiny.ui.nav ~shiny.ui.nav_menu ~shiny.ui.nav_control ~shiny.ui.nav_spacer ~shiny.ui.navset_bar ~shiny.ui.navset_pill ~shiny.ui.navset_tab_card ~shiny.ui.navset_pill_card ~shiny.ui.navset_hidden"
  },
  {
    "objectID": "reference/ui.navset_tab.html#example",
    "href": "reference/ui.navset_tab.html#example",
    "title": "Shiny",
    "section": "Example",
    "text": "Example\nSee nav"
  },
  {
    "objectID": "reference/ui.panel_well.html",
    "href": "reference/ui.panel_well.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.panel_well(args, kwargs)\nCreate a well panel\nCreates a panel with a slightly inset border and grey background. Equivalent to Bootstrap’s well CSS class.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nTagChild | TagAttrs\nUI elements to include inside the panel.\n()\n\n\nkwargs\nhtmltools.TagAttrValue\nAttributes to place on the panel tag.\n{}\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\npanel_sidebar panel_main"
  },
  {
    "objectID": "reference/ui.input_switch.html",
    "href": "reference/ui.input_switch.html",
    "title": "Shiny",
    "section": "",
    "text": "ui.input_switch(id, label, value=False, width=None)\nCreate a switch that can be used to specify logical values. Similar to ~shiny.ui.input_checkbox, but implies to the user that the change will take effect immediately.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid\nstr\nAn input id.\nrequired\n\n\nlabel\nhtmltools.TagChild\nAn input label.\nrequired\n\n\nvalue\nbool\nInitial value.\nFalse\n\n\nwidth\nOptional[str]\nThe CSS width, e.g. ‘400px’, or ‘100%’\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA UI element.\n\n\n\n\n\n\n\n.. admonition:: Server value\n``True`` if checked, ``False`` otherwise."
  },
  {
    "objectID": "reference/ui.input_switch.html#see-also",
    "href": "reference/ui.input_switch.html#see-also",
    "title": "Shiny",
    "section": "See Also",
    "text": "See Also\n~shiny.ui.input_checkbox ~shiny.ui.update_switch ~shiny.ui.input_checkbox_group ~shiny.ui.input_radio_buttons"
  },
  {
    "objectID": "reference/ui.input_switch.html#examples",
    "href": "reference/ui.input_switch.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"somevalue\", \"Some value\", False),\n    ui.output_ui(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.ui\n    def value():\n        return input.somevalue()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "reference/session.require_active_session.html",
    "href": "reference/session.require_active_session.html",
    "title": "Shiny",
    "section": "",
    "text": "session.require_active_session(session)\nRaise an exception if no Shiny session is currently active.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsession\nOptional[Session]\nA :class:~shiny.Session instance. If not provided, it is inferred via :func:~shiny.session.get_current_session.\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nThe session."
  },
  {
    "objectID": "reference/session.require_active_session.html#note",
    "href": "reference/session.require_active_session.html#note",
    "title": "Shiny",
    "section": "Note",
    "text": "Note\nShiny apps should not need to call this function directly. Instead, it’s intended to be used by Shiny developing who wish to create new functions that should only be called from within an active Shiny session.\n\nRaises\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf session is not active.\n\n\n\n\n\nSee Also\n~get_current_session"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Shiny",
    "section": "",
    "text": "page_navbar\nprint\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f\"The value of n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)"
  }
]