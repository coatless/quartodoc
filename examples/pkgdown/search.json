[
  {
    "objectID": "reference/Builder.build.html",
    "href": "reference/Builder.build.html",
    "title": "pkgdown example",
    "section": "",
    "text": "Builder.build(self)\nBuild index page, sphinx inventory, and individual doc pages."
  },
  {
    "objectID": "reference/get_object.html",
    "href": "reference/get_object.html",
    "title": "pkgdown example",
    "section": "",
    "text": "get_object(module, object_name, parser='numpy', load_aliases=True, dynamic=False, modules_collection=None)\nFetch a griffe object.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmodule\nstr\nA module name.\nrequired\n\n\nobject_name\nstr\nA function name.\nrequired\n\n\nparser\nstr\nA docstring parser to use.\n'numpy'\n\n\nload_aliases\n\nFor aliases that were imported from other modules, should we load that module?\nTrue\n\n\ndynamic\n\nWhether to dynamically import object. Useful if docstring is not hard-coded, but was set on object by running python code.\nFalse\n\n\nmodules_collection\nNone | ModulesCollection\nA griffe , used to hold loaded modules.\nNone\n\n\n\n\n\n\npreview: print a user-friendly preview of a griffe object.\n\n\n\n>>> get_function(\"quartodoc\", \"get_function\")\n<Function('get_function', ..."
  },
  {
    "objectID": "reference/Builder.html",
    "href": "reference/Builder.html",
    "title": "pkgdown example",
    "section": "",
    "text": "Builder(self, package, sections, version=None, dir='reference', title='Function reference', renderer='markdown', out_index=None, sidebar=None, use_interlinks=False, display_name='name')\nBase class for building API docs.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npackage\nstr\nThe name of the package.\nrequired\n\n\nsections\nlist[Any]\nA list of sections, with items to document.\nrequired\n\n\nversion\nstr | None\nThe package version. By default this attempts to look up the current package version (TODO).\nNone\n\n\ndir\nstr\nName of API directory.\n'reference'\n\n\ntitle\nstr\nTitle of the API index page.\n'Function reference'\n\n\nrenderer\ndict | Renderer | str\nThe renderer used to convert docstrings (e.g. to markdown).\n'markdown'\n\n\nout_index\nstr\nThe output path of the index file, used to list all API functions.\nNone\n\n\nsidebar\nstr | None\nThe output path for a sidebar yaml config (by default no config generated).\nNone\n\n\ndisplay_name\nstr\nThe default name shown for documented functions. Either “name”, “relative”, “full”, or “canonical”. These options range from just the function name, to its full path relative to its package, to including the package name, to its the its full path relative to its .__module__.\n'name'\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nbuild\nBuild index page, sphinx inventory, and individual doc pages.\n\n\ncreate_inventory\nGenerate sphinx inventory object.\n\n\ndo_blueprint\nConvert a layout with Auto elements to a full-fledged doc specification.\n\n\ndo_collect\nCollect the pages and sphinx item information from a layout.\n\n\ndo_summarize\nSummarize a layout into index tables.\n\n\nfrom_quarto_config\nConstruct a Builder from a configuration object (or yaml file).\n\n\ngenerate_sidebar\n\n\n\nload_layout\n\n\n\nwrite_doc_pages\nWrite individual function documentation pages.\n\n\nwrite_index\nWrite API index page.\n\n\n\n\n\n\nBuilder.build(self)\nBuild index page, sphinx inventory, and individual doc pages.\n\n\n\nBuilder.create_inventory(self, items)\nGenerate sphinx inventory object.\n\n\n\nBuilder.do_blueprint(self)\nConvert a layout with Auto elements to a full-fledged doc specification.\n\n\n\nBuilder.do_collect(self, blueprint)\nCollect the pages and sphinx item information from a layout.\n\n\n\nBuilder.do_summarize(self, blueprint, items)\nSummarize a layout into index tables.\n\n\n\nBuilder.from_quarto_config(cls, quarto_cfg)\nConstruct a Builder from a configuration object (or yaml file).\n\n\n\nBuilder.generate_sidebar(self, blueprint)\n\n\n\nBuilder.load_layout(self, sections, package)\n\n\n\nBuilder.write_doc_pages(self, pages, items)\nWrite individual function documentation pages.\n\n\n\nBuilder.write_index(self, content)\nWrite API index page."
  },
  {
    "objectID": "reference/preview.html",
    "href": "reference/preview.html",
    "title": "pkgdown example",
    "section": "",
    "text": "preview(ast, max_depth=999, compact=False)\nPrint a friendly representation of a griffe object (e.g. function, docstring)\n\n\n>>> from quartodoc import get_object\n>>> obj = get_object(\"quartodoc\", \"get_object\")\n>>> preview(obj.docstring.parsed)\n ...\n>>> preview(obj)\n ..."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "pkgdown example",
    "section": "",
    "text": "These functions inspect and parse docstrings.\n\n\n\nget_object\nFetch a griffe object.\n\n\npreview\nPrint a friendly representation of a griffe object (e.g. function, docstring)\n\n\nBuilder\nBase class for building API docs.\n\n\nBuilder.build\nBuild index page, sphinx inventory, and individual doc pages."
  }
]